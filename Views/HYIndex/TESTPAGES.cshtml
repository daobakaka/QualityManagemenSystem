@model WebWinMVC.Models.JRZLWTViewModel
@{
    var pageTitle = "测试";
    ViewData["Title"] = pageTitle;
}


<div class="col-md-2 d-flex justify-content-center align-items-center">
    <div>
        <h3 class="text-center">一键处理区域</h3>
        <form>
            <div class="result-container d-flex flex-column align-items-center">
                <button type="button" class="btn btn-outline-secondary mb-2" style="width: 5vw;" onclick="exportTableToExcelQuery()">详情导出</button>
                <button type="button" class="btn btn-outline-secondary mb-2" style="width: 5vw;" onclick="exportTableToExcelAnalyse()">清单导出</button>
                <button type="button" class="btn btn-outline-secondary mb-2" style="width: 5vw;" onclick="generatePPTOnePage(dataStoreOnePage.probelmTitle,dataStoreOnePage.problemDescription,dataStoreOnePage.failureSituation)">生成一页纸</button>
                <button type="button" class="btn btn-outline-secondary mb-2" style="width: 5vw;">纳入PSQ</button>
            </div>
        </form>

    </div>
</div>
<script>
 var dataStoreOnePage = {
            problemDescription: [
                "问题来源内容",
                "问题定义内容",
                "问题等级内容",
                "开启日期内容",
                "供应商内容",
                "涉及车型内容",
                "内部车型内容",
                "底盘号内容",
                "生产/购车时间内容",
                "在库时间内容",
                "PQS 编号内容"
            ],
            failureSituation: [
                "1100",
                "12%",
                "0.5%",
                "0.3%",
                "内蒙台股",
                "100000KM",
                "普通路况",
                "是",
                "是",
                "是或否",
                "否",
                "低",
                "高"
            ],
            probelmTitle: "一页纸清单"
        };
</script>
<script>
    function generatePPTOnePage(titleText, problemDescriptionContents, failureSituationContents) {
        console.log("start to create PPT");
        let pres = new PptxGenJS();
        let slide = pres.addSlide();

        // 幻灯片的默认尺寸（宽度和高度以英寸为单位）
        let slideWidth = 10;  // 默认为 10 英寸
        let slideHeight = 5.625; // 默认为 5.7 英寸

        // 1. 添加标题框，占幻灯片的1/5
        let titleHeight = 0.6; // 标题的高度
        let titleOpts = {
            x: 0,
            y: 0.1,
            w: slideWidth,  // 使用整个宽度
            h: titleHeight,
            fontSize: 24,
            color: "000000",
            align: "center",
            fill: { color: "4682B4" } // 钢蓝色背景
        };
        slide.addText(titleText, titleOpts);

        // 2. 计算文本框的宽度和高度
        let sectionWidth = slideWidth / 3; // 将宽度均分为 3 部分
        let problemDescHeight = titleHeight / 2; // “问题描述”框的高度为标题框的一半
        let failureHeight = titleHeight / 2; // “失效情况”框的高度为标题框的一半
        let remainingHeight = slideHeight - titleHeight; // 剩余空间高度
        let yPos = titleHeight+0.1; // 标题下方的起始位置

        // 3. 固定字段标签（问题描述）
        let fixedLabels = [
            "问题来源：",
            "问题定义：",
            "问题等级：",
            "开启日期：",
            "供应商：",
            "涉及车型：",
            "内部车型：",
            "底盘号：",
            "生产/购车时间：",
            "在库时间：",
            "PQS 编号："
        ];

        // 4. 生成问题描述文本框内容
        let problemDescriptionText = fixedLabels.map((label, i) => `${label}${problemDescriptionContents[i] || "default"}`).join("\n");

        // 5. 固定字段标签（失效情况）
        let failureLabels = [
            "案例数：",
            "失效率（客户）：",
            "失效率（车型）：",
            "失效率（发动机）：",
            "失效区域：",
            "失效里程：",
            "失效工况：",
            "是否按照要求保养：",
            "是否要按照要求返修：",
            "是否为断点失效产品：",
            "是否超边界：",
            "严重度：",
            "可能性："
        ];

        // 6. 生成失效情况文本框内容
        let failureSituationText = failureLabels.map((label, i) => `${label}${failureSituationContents[i] || "default"}`).join("\n");

        // 添加问题描述文本框
        slide.addText("问题描述", {
            x: 0,
            y: yPos,
            w: sectionWidth, // 宽度设置为幻灯片宽度的1/3
            h: problemDescHeight,
            fontSize: 18, // 标题字体较大
            color: "000000",
            align: "center",
            fill: { color: "#ADD8E6" } // 淡蓝色背景
        });
        // 添加失效情况文本框
        slide.addText("失效情况", {
            x: sectionWidth,
            y: yPos,
            w: slideWidth / 6, // 宽度设置为幻灯片宽度的1/6
            h: failureHeight,
            fontSize: 18, // 标题字体较大
            color: "000000",
            align: "center",
            fill: { color: "#ADD8E6" } // 淡蓝色背景
        });
        slide.addText("根本原因", {
            x: sectionWidth + slideWidth / 6,
            y: yPos,
            w: (1.5*slideWidth) / 6, // 宽度设置为幻灯片宽度的1/6
            h: failureHeight,
            fontSize: 18, // 标题字体较大
            color: "000000",
            align: "center",
            fill: { color: "#ADD8E6" } // 淡蓝色背景
        });
        slide.addText("进展及计划", {
            x: sectionWidth + slideWidth / 6 + (1.5 * slideWidth) / 6,
            y: yPos,
            w: (1.5 * slideWidth) / 6, // 宽度设置为幻灯片宽度的1/6
            h: failureHeight,
            fontSize: 18, // 标题字体较大
            color: "000000",
            align: "center",
            fill: { color: "#ADD8E6" } // 淡蓝色背景
        });
        slide.addText("售后方案：\n根本原因：\n原因分析：\n", {
            x: sectionWidth + slideWidth / 6 ,
            y: yPos + problemDescHeight,
            w: (1.5 * slideWidth) / 6, // 宽度设置为幻灯片宽度的1/6
            h: remainingHeight - problemDescHeight,
            fontSize: 9, // 内容
            color: "000000",
            vAlign: "top", // 垂直对齐方式为顶部
           // align: "left",
        });
        slide.addText("牵头部门：\n遏制措施：\n长期措施：\n下一步计划：", {
            x: sectionWidth + slideWidth / 6 + (1.5 * slideWidth) / 6,
            y: yPos + problemDescHeight,
            w: (1.5 * slideWidth) / 6, // 宽度设置为幻灯片宽度的1/6
            h: remainingHeight - problemDescHeight,
            fontSize: 9, // 内容
            color: "000000",
            vAlign: "top", // 垂直对齐方式为顶部
            // align: "left",
        });
        slide.addText(problemDescriptionText, {
            x: 0,
            y: yPos + problemDescHeight,
            w: sectionWidth,
            h: remainingHeight - problemDescHeight , // 保证内容区域不重叠
            fontSize: 9, // 内容字体较小
            color: "000000",
            vAlign: "top", // 垂直对齐方式为顶部
            align: "left",
            bulletStyle: {
                type: 'disc', // 项目符号类型：圆点
                size: 10 // 项目符号大小
            }
        });

        slide.addText(failureSituationText,  {
            x: sectionWidth,
            y: yPos + failureHeight,
            w: slideWidth / 6,
            h: remainingHeight - failureHeight, // 保证内容区域不重叠
            fontSize: 9, // 内容字体较小
            color: "000000",
            vAlign: "top", // 垂直对齐方式为顶部
            align: "left",
            bulletStyle: {
                type: 'disc', // 项目符号类型：圆点
                size: 10 // 项目符号大小
            }
        });

        // 7. 保存演示文稿
        pres.writeFile({ fileName: "example_presentation.pptx" })
            .then(() => console.log("PPTX 文件已下载"))
            .catch(err => console.error("生成 PPTX 文件时出错：", err));
    }

    // 示例调用
 

</script>  @* 导出模块 *@

@section Scripts {
    <script>
   
    </script>

    }
