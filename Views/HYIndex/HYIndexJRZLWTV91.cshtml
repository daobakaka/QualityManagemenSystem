@model WebWinMVC.Models.JRZLWTViewModel

@{
    ViewData["Title"] = "即日质量问题";
}

<div class="datatable-container">
    <div class="row">
        <!-- 表格区域，占据屏幕的全宽度 -->
        <h2 class="text-center">@Model.AdditionalInfo</h2>
        <div class="d-flex justify-content-center">
            <table id="example" class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>旧物料代码</th>
                        <th>旧物料描述</th>
                        <th>供应商短代码</th>
                        <th>供应商名称</th>
                        <th>3MIS</th>
                        <th>6MIS</th>
                        <th>12MIS</th>
                        <th>24MIS</th>
                        <th>36MIS</th>
                        <th>SMT</th>
                        <th>部位码</th>
                        <th>故障码</th>
                        <th>QE</th>
                        <th>识别故障模式</th>
                        <th>断点失效</th> 
                        <th>已纳入SIL</th>
                        <th>PQS编号</th>
                        <th>断点时间</th>
                        <th>开启时间</th>
                        <th>备注</th>
                        <th>服务识别准确</th>
                        <th>操作</th> <!-- 新增操作列 -->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.ChecklistV91s)
                    {
                        <tr>
                            <td>@item.OldMaterialCode</td>

                            <td>
                                <span data-toggle="tooltip" title="@item.OldMaterialDescription">
                                @item.OldMaterialDescription
                                </span>
                            </td>
                            <td>@item.SupplierShortCode</td>
                            <td>@item.ResponsibilitySourceSupplierName</td>
                            <td>@item.MIS3</td>
                            <td>@item.MIS6</td>
                            <td>@item.MIS12</td>
                            <td>@item.MIS24</td>
                            <td>@item.MIS36</td>
                            <td>@item.SMT</td>
                            <td>@item.LocationCode</td>
                            <td>@item.FaultCode</td>
                            <td>@item.QE</td>
                         @*    <td>
                                <span data-toggle="tooltip" title="@item.IdentifiedFaultMode">
                                    @item.IdentifiedFaultMode
                                </span>
                            </td> *@
                            <td>@item.IdentifiedFaultMode</td>
                            <td>@item.IdentifiedFaultCode</td>
                            <td>@item.IncludedInSIL</td>
                            <td>@item.PQSNumber</td>
                            <td>@item.BreakpointTime</td>
                            <td>@item.StartTime</td>
                            <td>
                                <span data-toggle="tooltip" title="@item.Remarks">
                                    @(item.Remarks.Length > 10 ? item.Remarks.Substring(0, 10) + "..." : item.Remarks)
                                </span>
                            </td>
                            <td>@item.ServiceFaultIdentificationAccurate</td>
                            <td>
                                <button class="btn btn-primary btn-sm edit-btn" data-id="@item.ID" data-bs-toggle="modal" data-bs-target="#editModal">编辑</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- 下侧交互区域 -->
<div class="userInput-container" >
        <div class="row">
            <!-- 搜索区域，占据屏幕的1/3宽度，且居中对齐 -->
            <div class="col-md-2 d-flex justify-content-center align-items-center">
                <div>
                    <h3 class="text-center">详情查询</h3>
                 <form id="searchForm">
                        <div class="form-group">
                        <input type="text" class="form-control" id="searchByCarNumber" placeholder="输入车号或底盘号" style=" margin-top:1vh">
                        </div>
                        <div class="form-group">
                        <input type="text" class="form-control" id="searchByMaterialNumber" placeholder="输入物料号" style=" margin-top:1vh">
                        </div>
                        <div class="form-group">
                        <input type="text" class="form-control" id="searchByPQSNumber" placeholder="输入PQS编号" style=" margin-top:1vh">
                        </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="searchByDate" placeholder="选择日期"  style=" margin-top:1vh">
                    </div>
                    <button type="button" class="btn btn-outline-secondary mb-2" style="width: 8vw ;margin-top:1.5vh"  onclick="resetFilters()">重置</button>
                </form>
                </div>
            </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Clear date input by default
                document.getElementById('searchByDate').value = '';

                // Add event listeners
                document.getElementById('searchByCarNumber').addEventListener('input', filterTable);
                document.getElementById('searchByMaterialNumber').addEventListener('input', filterTable);
                document.getElementById('searchByPQSNumber').addEventListener('input', filterTable);
                document.getElementById('searchByDate').addEventListener('input', filterTable);
                //document.getElementById('resetButton').addEventListener('click', resetFilters);
            });

            function convertToYymmdd(dateStr) {
                // 处理不同的日期格式
                let parts = dateStr.match(/(\d{4})[\/\-](\d{1,2})[\/\-](\d{1,2})/);
                if (parts) {
                    let year = parts[1];
                    let month = String(parts[2]).padStart(2, '0');
                    let day = String(parts[3]).padStart(2, '0');
                    return `${year.slice(2)}${month}${day}`;
                }

                // 如果输入的是日期对象
                if (dateStr instanceof Date) {
                    let year = dateStr.getFullYear().toString();
                    let month = String(dateStr.getMonth() + 1).padStart(2, '0');
                    let day = String(dateStr.getDate()).padStart(2, '0');
                    return `${year.slice(2)}${month}${day}`;
                }
                
                // 无法解析日期
                return '';
            }
            function parseDate(dateStr) {
                // 解析 yyyyMMdd 或 yyMMdd 格式的日期字符串
                let parts = dateStr.match(/(\d{2})(\d{2})(\d{2})/);
                if (parts) {
                    let year = '20' + parts[1]; // 假设年份是 20xx
                    let month = parts[2];
                    let day = parts[3];
                    return new Date(`${year}-${month}-${day}`);
                }
                return null;
            }


            function formatToTimestamp(dateStr) {
                let date = parseDate(dateStr);
                return date ? date.getTime() + 24* 60 * 60 * 1000 - 999 : null;
            }

            function convertToTimestamp(dateStr) {
                // 用于处理日期的格式
                let date = parseDate(dateStr);
                return date ? date.getTime() : null;
            }


            function filterTable() {
                console.log(`Start filtering...`);
                let carNumber = document.getElementById('searchByCarNumber').value.toLowerCase().trim();
                let materialNumber = document.getElementById('searchByMaterialNumber').value.toLowerCase().trim();
                let pqsNumber = document.getElementById('searchByPQSNumber').value.toLowerCase().trim();
                let dateRange = document.getElementById('searchByDate').value.toLowerCase();

                // Convert date range to start and end dates
                let [startDateStr, endDateStr] = dateRange.split('-');

                // 转换为时间戳
                let startTimestamp = startDateStr ? convertToTimestamp(startDateStr) : null;
                let endTimestamp = endDateStr ? convertToTimestamp(endDateStr) + 24 * 60 * 60 * 1000 - 1 : startTimestamp + 24 * 60 * 60 * 1000 - 1;


                let table = document.getElementById('queryTable');
                let rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
                ///-新增加的处理 空格 逻辑
                function matchesSearchTerm(cellText, searchTerms) {
                    return searchTerms.some(term => cellText.includes(term));
                }
                let carNumberTerms = carNumber.split(/\s+/).map(term => term.trim()).filter(term => term.length > 0);
                let materialNumberTerms = materialNumber.split(/\s+/).map(term => term.trim()).filter(term => term.length > 0);
                let pqsNumberTerms = pqsNumber.split(/\s+/).map(term => term.trim()).filter(term => term.length > 0);

                for (let i = 0; i < rows.length; i++) {
                    let cells = rows[i].getElementsByTagName('td');
                    let showRow = true;

                    // Check car number and chassis number
                    if (carNumberTerms.length > 0) {
                        let carMatch = cells.length > 17 && matchesSearchTerm(cells[17].textContent.toLowerCase(), carNumberTerms);
                        let chassisMatch = cells.length > 18 && matchesSearchTerm(cells[18].textContent.toLowerCase(), carNumberTerms);
                        if (!carMatch && !chassisMatch) {
                            showRow = false;
                        }
                    }

                    // Check material number
                    if (materialNumberTerms.length > 0 && cells.length > 2) {
                        let materialMatch = matchesSearchTerm(cells[2].textContent.toLowerCase(), materialNumberTerms);
                        if (!materialMatch) {
                            showRow = false;
                        }
                    }

                    // Check PQS number
                    if (pqsNumberTerms.length > 0 && cells.length > 16) {
                        let pqsMatch = matchesSearchTerm(cells[16].textContent.toLowerCase(), pqsNumberTerms);
                        if (!pqsMatch) {
                            showRow = false;
                        }
                    }


                    if (dateRange) {
                        let rowDateStr = cells.length > 0 ? convertToYymmdd(cells[0].textContent) : '';
                        let rowTimestamp = formatToTimestamp(rowDateStr);
                        if (rowTimestamp !== null) {
                            console.log('Row Timestamp:', rowTimestamp + '---' + rowDateStr);
                            console.log('Start Timestamp:', startTimestamp + '---' + startDateStr);
                            console.log('End Timestamp:', endTimestamp + '---' + endDateStr);

                            // 过滤逻辑
                            if (startTimestamp && rowTimestamp < startTimestamp) {
                                showRow = false;
                            }
                            if (endTimestamp && rowTimestamp > endTimestamp) {
                                showRow = false;
                            }
                        } else {
                            showRow = false;
                        }
                    }

                    rows[i].style.display = showRow ? '' : 'none';
                }
                console.log(`Filtering done.`);
            }

            function resetFilters() {
                document.getElementById('searchByCarNumber').value = '';
                document.getElementById('searchByMaterialNumber').value = '';
                document.getElementById('searchByPQSNumber').value = '';
                document.getElementById('searchByDate').value = '';
                filterTable(); // Clear filters and show all data
            }
        </script>


            <!-- 搜索结果区域，占据屏幕的2/3宽度，且居中对齐 -->
          <div class="col-md-8 d-flex justify-content-center align-items-center">

            <div class="custom-container">
                <div class="row">
                  
                    <div class="d-flex justify-content-center">
                        <table id="queryTable" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>日期</th>
                                    <th>车型</th>
                                    <th>旧物料</th>
                                    <th>描述</th>
                                    <th>短代码</th>
                                    <th>供应商</th>
                                    <th>案例数</th>
                                    <th>累计案例数</th>
                                    <th>3MIS</th>
                                    <th>6MIS</th>
                                    <th>12MIS</th>
                                    <th>24MIS</th>
                                    <th>36MIS</th>
                                    <th>SMT</th>
                                    <th>部位码</th>
                                    <th>故障码</th>
                                    <th>PQS编号</th>
                                    <th>立项车号</th>
                                    <th>立项底盘号</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.ChecklistV91Queries)
                                {
                                    <tr>
                                        <td>@item.ApprovalDate</td>
                                        <td>@item.VehicleModel</td>
                                        <td>
                                            <span class="dynamic-tooltip"
                                                  data-old-material-code="@item.OldMaterialCode"
                                                  data-remote-tooltip="true" title="loading..">
                                                @item.OldMaterialCode
                                            </span>
                                            <div class="loading-indicator" >Loading...</div>
                                        </td>

                                        <td>@item.OldMaterialDescription</td>
                                        <td>@item.SupplierShortCode</td>
                                        <td>@item.ResponsibilitySourceSupplierName</td>
                                        <td>@item.CaseCount</td>
                                        <td>@item.AccumulatedCaseCount</td>
                                        <td>@item.MIS3</td>
                                        <td>@item.MIS6</td>
                                        <td>@item.MIS12</td>
                                        <td>@item.MIS24</td>
                                        <td>@item.MIS36</td>
                                        <td>@item.SMT</td>
                                        <td>@item.LocationCode</td>
                                        <td>@item.FaultCode</td>
                                        <td>@item.PQSNumber</td>
                                        <td>@item.ProjectVehicleNumber</td>
                                        <td>@item.ProjectChassisNumber</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
           </div>
      

            <!-- 一键处理区域 -->
            <div class="col-md-2 d-flex justify-content-center align-items-center">
                <div>
                    <h3 class="text-center">一键处理区域</h3>
                    <form>
                        <div class="result-container d-flex flex-column align-items-center">
                            <button type="button" class="btn btn-outline-secondary mb-2" style="width: 5vw;" onclick="exportTableToExcelQuery()">详情导出</button>
                            <button type="button" class="btn btn-outline-secondary mb-2" style="width: 5vw;" onclick="exportTableToExcelAnalyse()">清单导出</button>
                            <button type="button" class="btn btn-outline-secondary mb-2" style="width: 5vw;" onclick="generatePPTOnePage()">生成一页纸</button>
                            <button type="button" class="btn btn-outline-secondary mb-2" style="width: 5vw;">纳入PSQ</button>
                        </div>
                    </form>
            
                </div>
            </div>
        <script>
            function exportTableToExcelQuery() {
                console.log('start to dowmload excel');
                let wb = XLSX.utils.book_new();
                let ws = XLSX.utils.table_to_sheet(document.getElementById('queryTable'));
                XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
                XLSX.writeFile(wb, 'table_data_query.xlsx');
            }
            function exportTableToExcelAnalyse() {
                console.log("start to download excel for QE");
                let wb = XLSX.utils.book_new(); // 确保这里是 XLSX
                let ws = XLSX.utils.table_to_sheet(document.getElementById("example"));
                XLSX.utils.book_append_sheet(wb, ws, "Sheet1"); // 确保这里是 XLSX
                XLSX.writeFile(wb, "table_data_analyse.xlsx"); // 确保这里是 XLSX
            }
            function generatePPTOnePage() {
                console.log("start to create PPT");
                let pres = new PptxGenJS();

                let slide = pres.addSlide();

                // 1. 添加标题框，占幻灯片的1/5
                let titleText = "文档标题";
                let titleOpts = { x: 0.5, y: 0.1, w: 8.5, h: 1, fontSize: 24, color: "000000", align: "center" };
                slide.addText(titleText, titleOpts);

                // 2. 计算文本框的高度和起始位置
                let slideHeight = 6; // 假设幻灯片的高度是 10 英寸，标题框占 1 英寸，所以剩下 9 英寸
                let sectionHeight = (slideHeight - 1) / 3; // 剩余空间均分成三个部分
                let yPos = 1.2; // 标题下方的起始位置

                // 3. 添加三个文本框
                let sectionTitles = ["详细信息", "原本分析", "解决方案"];
                sectionTitles.forEach((title, index) => {
                    let textOpts = { x: 0.5, y: yPos + (sectionHeight * index), w: 8.5, h: sectionHeight, fontSize: 18, color: "000000", align: "left" };
                    slide.addText(title, textOpts);
                });

                // 4. 保存演示文稿
                pres.writeFile({ fileName: "example_presentation.pptx" })
                    .then(() => console.log("PPTX 文件已下载"))
                    .catch(err => console.error("生成 PPTX 文件时出错：", err));
            }


        </script>  @* 导出模块 *@
        </div>
    </div>
@* 模块编辑区域 *@
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog custom-modal-dialog" role="document">
        <div class="modal-content custom-modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel" style="text-align: center; width: 100%;">XXX编辑记录</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editForm" method="post">
                <div class="modal-body custom-modal-body">
                    <!-- 隐藏字段 -->
                    <input type="hidden" id="editId" name="ID" />
                    <input type="hidden" id="editOldMaterialCode" name="OldMaterialCode" />
                    <input type="hidden" id="editOldMaterialDescription" name="OldMaterialDescription" />
                    <input type="hidden" id="editSupplierShortCode" name="SupplierShortCode" />
                    <input type="hidden" id="editResponsibilitySourceSupplierName" name="ResponsibilitySourceSupplierName" />
                    <input type="hidden" id="editMIS3" name="MIS3" />
                    <input type="hidden" id="editMIS6" name="MIS6" />
                    <input type="hidden" id="editMIS12" name="MIS12" />
                    <input type="hidden" id="editMIS24" name="MIS24" />
                    <input type="hidden" id="editMIS36" name="MIS36" />
                    <input type="hidden" id="editSMT" name="SMT" />
                    <input type="hidden" id="editLocationCode" name="LocationCode" />
                    <input type="hidden" id="editFaultCode" name="FaultCode" />
                    <input type="hidden" id="editQE" name="QE" />
                    @* <input type="hidden" id="editIdentifiedFaultCode" name="IdentifiedFaultCode" /> *@

                    <!-- 显示字段 -->
                    <div class="form-group">
                        <label for="IdentifiedFaultMode">识别故障模式</label>
                        <input type="text" class="form-control" name="IdentifiedFaultMode" value="" />
                    </div>
                    <div class="form-group">
                        <label for="IdentifiedFaultCode">断点失效</label> @* 暂时用识别故障码代替 *@
                        <input type="text" class="form-control" name="IdentifiedFaultCode" value="" />
                    </div>
                    @*      <div class="form-group">
                    <label for="IdentifiedFaultMode">识别故障模式</label>
                    <input type="text" class="form-control" name="IdentifiedFaultMode" value="" />
                    </div> *@
                    <div class="form-group">
                        <label for="IncludedInSIL">是否已纳入SIL</label>
                        <input type="text" class="form-control" name="IncludedInSIL" value="" />
                    </div>
                    <div class="form-group">
                        <label for="PQSNumber">PQS编号</label>
                        <input type="text" class="form-control" name="PQSNumber" value="" />
                    </div>
                    <div class="form-group">
                        <label for="BreakpointTime">断点时间</label>
                        <input type="text" class="form-control" name="BreakpointTime" value="" />
                    </div>
                    <div class="form-group">
                        <label for="StartTime">开启时间</label>
                        <input type="text" class="form-control" name="StartTime" value="" />
                    </div>
                    <div class="form-group">
                        <label for="Remarks">备注</label>
                        <input type="text" class="form-control" name="Remarks" value="" />
                    </div>
                    <div class="form-group">
                        <label for="ServiceFaultIdentificationAccurate">服务故障原因识别是否准确</label>
                        <input type="text" class="form-control" name="ServiceFaultIdentificationAccurate" value="" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="submit" class="btn btn-primary">保存更改</button>
                </div>
            </form>
        </div>
    </div>
</div>
    @section Scripts {
    <script>
        var dataStore = {
            tooltipContentCache: ''
        };
    </script>@* 全局变量模块 *@
    <script>
        $(document).ready(function () {
            jQuery('[data-remote-tooltip]').tooltip({
                trigger: 'manual',
                html: true
            });
          
            $('.dynamic-tooltip').on('mouseenter', function () {
                let $this = $(this);
                let oldMaterialCode = $this.data('old-material-code');
            
                let $loadingIndicator = $this.find('.loading-indicator');
                let dateRange = $('#searchByDate').val(); // 获取输入框的值

                // 显示加载指示器
                $loadingIndicator.show();
                $.ajax({
                    url: '/queryAPI/remotetooltip/tooltipdata',
                    method: 'GET',
                    data: { oldMaterialCode: oldMaterialCode, 
                        dateRange: dateRange },
                    success: function (data) {
                        // console.log('Data type:', typeof data); // 检查数据类型
                        // console.log(data);
                        dataStore.tooltipContentCache = data;
                        // 数据是一个数组，迭代所有记录来生成内容
                        data.sort((a, b) => {
                            // 这里假设制造月是一个字符串形式的日期，格式是 'YYYYMM'
                            return b.manufacturingMonth.localeCompare(a.manufacturingMonth);
                        });
                        let tooltipContent = data.map(item => `制造月：${item.manufacturingMonth} ；MIS区间：${item.misInterval}；VAN：${item.van}；MIS：${item.mis}；FDP：${item.fdp}；故障描述：${item.faultDescription
                            }`).join('\n');

                        // 更新 tooltip 内容
                        $this.attr('title', tooltipContent);
                        $this.tooltip('update');

                        // 隐藏加载指示器
                        $loadingIndicator.hide();
                    },
                    error: function () {
                        $this.attr('title', 'Error loading data');
                        $this.tooltip('update');

                        // 隐藏加载指示器
                        $loadingIndicator.hide();
                    }
                });
            }).on('mouseleave', function () {
                $(this).tooltip('hide');
            });
        });
    </script>@*  显示remote 执行事件 *@
    <script>    /* 显示datatable 以及用户区域 以及执行查询区域  用户查询表滚轮同步事件  */
            $(window).on('load', function () {
                $('#example').DataTable({
                    "paging": true,
                    "pageLength": 25, // 设置默认每页显示25条记录
                    "ordering": true,
                    "info": true,
                    "searching": true,
                    "initComplete": function () {
                        let api = this.api();

                        // 为每列添加筛选下拉菜单
                        // api.columns().every(function () {
                        //     let column = this;
                        //     let header = $(column.header());
                        //     let headerText = header.text().trim();

                        //     // 创建一个筛选下拉菜单并添加到表头
                        //     let select = $('<select class="filter-select"><option value="">' + headerText + '</option></select>')
                        //         .appendTo(header)
                        //         .on('change', function () {
                        //             let val = $.fn.dataTable.util.escapeRegex($(this).val());

                        //             // 使用 `search` 函数进行精确匹配
                        //             column
                        //                 .search(val ? '^' + val + '$' : '', true, false)
                        //                 .draw();
                        //         });

                        //     // 获取列中唯一的值并填充到下拉菜单
                        //     column.data().unique().sort().each(function (d) {
                        //         // 强制将每个值转换为字符串
                        //         let value = d === null ? '' : d.toString();
                        //         select.append('<option value="' + value + '">' + value + '</option>');
                        //     });
                        // });
                    }
                });
                $('#example').show();

            });
            
        window.addEventListener('load', function () {
            // 显示用户输入区域
            document.querySelector('.userInput-container').style.display = 'block';
            console.log(`dispaly!!!!!!!!!!!!!!!!!!!!!!!`);
           
        });
        console.log(`startMove!!!!!!!!!!!!!!!!!!!!!!!false`);
        document.querySelector('.custom-container .table tbody').addEventListener('scroll', function () {
            const thead = document.querySelector('.custom-container .table thead');
            thead.scrollLeft = this.scrollLeft;
        
        });

    </script>
    <script>
        let isWindowCreated = false;
        let floatingWindowDiv = null;


        // 创建悬浮窗口
        function createFloatingWindow() {
            if (isWindowCreated) return; // 防止重复创建窗口
            isWindowCreated = true;

            // 创建悬浮窗口
            const windowDiv = document.createElement('div');
            windowDiv.id = 'floatingWindow';
            windowDiv.style.position = 'fixed';
            windowDiv.style.top = '25%';
            windowDiv.style.left = '25%';
            windowDiv.style.width = '50vw';
            windowDiv.style.height = '50vh';
            windowDiv.style.backgroundColor = 'white';
            windowDiv.style.border = '3px solid black';
            windowDiv.style.zIndex = 1000;
            windowDiv.style.overflow = 'hidden';
            document.body.appendChild(windowDiv);

            floatingWindowDiv = windowDiv; // 赋值给 floatingWindowDiv

            // 创建并插入图表容器
            const chartDiv = document.createElement('div');
            chartDiv.id = 'panelContent';
            chartDiv.style.width = '100%';
            chartDiv.style.height = '100%';
            chartDiv.style.position = 'relative';
            windowDiv.appendChild(chartDiv);

            // 创建拖拽区域
            const dragArea = document.createElement('div');
            dragArea.style.position = 'absolute';
            dragArea.style.top = '0';
            dragArea.style.left = '0';
            dragArea.style.width = '50px';
            dragArea.style.height = '50px';
            dragArea.style.backgroundColor = 'rgba(0.1, 0.1, 0.1, 0.1)';
            dragArea.style.cursor = 'move';
            dragArea.style.borderRadius = '50%';
            windowDiv.appendChild(dragArea);

            // 初始化拖拽功能
            initializeDrag(dragArea, windowDiv);

            // 处理数据并绘制图表
            plotData(dataStore.tooltipContentCache);
        }

        // 销毁悬浮窗口
        function destroyFloatingWindow() {
            if (!isWindowCreated) return;
            document.body.removeChild(floatingWindowDiv);
            floatingWindowDiv = null;
            isWindowCreated = false;
        }

        // 处理数据并绘制图表
        function plotData(data) {
            // 定义函数将值映射到指定范围
            const mapToRange = (value, min, max) => {
                if (value < min) return min;
                if (value > max) return max;
                return value;
            };

            // 定义函数将制造日期映射到 0 到 50 的范围
            const mapDateToRange = (dateStr) => {
                const year = parseInt(dateStr.substring(0, 4), 10);
                const yearOffset = 2015;
                const minYear = 2015;
                const maxYear = 2026;
                return mapToRange((year - yearOffset) / (maxYear - minYear) * 50, 0, 50);
            };

            // 解析和处理数据
            const processedData = data
                .filter(item => {
                    const manufacturingYear = parseInt(item.manufacturingMonth.substring(0, 4), 10);
                    return manufacturingYear >= 2015 && manufacturingYear <= 2026;
                })
                .map(item => {
                    let x = parseFloat(item.mis);
                    let y = parseFloat(item.van.substring(2)); // 去掉前两位

                    // 处理 X 轴数据，保持在 0 到 50 的范围内
                    x = x > 50 ? 0 : x;
                    x = mapToRange(x, 0, 50);

                    // 处理 Y 轴数据，映射到 0 到 50 的范围内
                    y = mapToRange(y, 0, 50);

                    // 处理 Z 轴数据
                    const z = mapDateToRange(item.manufacturingMonth);

                    return { x, y, z, original: item };
                });

            const xValues = processedData.map(item => item.x);
            const yValues = processedData.map(item => item.y);
            const zValues = processedData.map(item => item.z);
            const textValues = processedData.map(item => `MIS:${item.original.mis}<br>
                                                          VAN:${item.original.van}<br>
                                                          M.O.D:${item.original.manufacturingMonth}<br>
                                                          FDP:${item.original.fdp}`);

            // 计算 Z 轴的刻度值和标签
            const zTickvals = Array.from({ length: 12 }, (_, i) => i * 4.16);
            const zTicktext = Array.from({ length: 12 }, (_, i) => 2015 + i).map(year => year.toString());

            // 计算 Y 轴的刻度值和标签
            const yTickvals = Array.from({ length: 10 }, (_, i) => 70000000 + i * 1000000);
            const yTicktext = yTickvals.map(val => val.toString());

            // 绘制图表
            plotChart(xValues, yValues, zValues, textValues, zTickvals, zTicktext, yTickvals, yTicktext);
        }

        // 绘制图表
        // 绘制图表
        function plotChart(xValues, yValues, zValues, textValues, zTickvals, zTicktext, yTickvals, yTicktext) {
            const scatterTrace = {
                x: xValues,
                y: yValues,
                z: zValues,
                mode: 'markers',
                type: 'scatter3d',
                marker: {
                    size: 5,
                    color: zValues,
                    colorscale: 'Viridis',
                    colorbar: {
                        title: 'Z 值'
                    }
                },
                text: textValues,
                hoverinfo: 'text',
                hoverlabel: {
                    align: 'center',
                    bgcolor: 'rgba(0,255,255,0.7)',
                    font: {
                        family: 'Arial, sans-serif',
                        size: 12,
                        color: '#000000'
                    }
                }
            };

            // 示例立方体
            const cubeTraces = [10, 30].map(zHeight => ({
                type: 'mesh3d',
                x: [0, 50, 50, 0, 0, 50, 50, 0],
                y: [0, 0, 50, 50, 0, 0, 50, 50],
                z: [zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight],
                i: [0, 0, 1, 1, 4, 4, 5, 5],
                j: [1, 2, 2, 3, 5, 6, 6, 7],
                k: [2, 3, 3, 4, 6, 7, 7, 4],
                opacity: 0.3,
                color: 'rgba(0,0,255,0.2)', // 半透明蓝色
                text: [zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight].map(z => `Z: ${z}`),
                hoverinfo: 'text'
            }));

            // 图表布局
            const layout = {
                title: '三维散点图与多个立方体',
                scene: {
                    xaxis: { title: 'MIS' },
                    yaxis: {
                        title: 'VAN',
                        tickvals: yTickvals,
                        ticktext: yTicktext
                    },
                    zaxis: {
                        title: 'M.O.D',
                        tickvals: zTickvals,
                        ticktext: zTicktext
                    },
                    camera: {
                        eye: { x: 1.25, y: 1.25, z: 1.25 }
                    }
                },
                margin: { t: 50, b: 50 }
            };

            // 配置
            const config = {
                displayModeBar: false,
                modeBarButtonsToRemove: ['zoom2d', 'pan2d', 'editInChartStudio'],
                modeBarButtonsToAdd: ['resetScale2d']
            };

            // 绘制图表
            Plotly.newPlot('panelContent', [scatterTrace, ...cubeTraces], layout, config);
        }



        // 初始化拖拽功能
        function initializeDrag(dragArea, windowDiv) {
            let isDragging = false;
            let startX, startY, startLeft, startTop;

            dragArea.addEventListener('mousedown', (e) => {
                e.preventDefault();

                isDragging = true;
                const rect = windowDiv.getBoundingClientRect();
                startX = e.clientX;
                startY = e.clientY;
                startLeft = rect.left;
                startTop = rect.top;

                document.addEventListener('mousemove', onMouseMove);
                document.addEventListener('mouseup', onMouseUp);
            });

            function onMouseMove(e) {
                if (!isDragging) return;
                const dx = e.clientX - startX;
                const dy = e.clientY - startY;
                windowDiv.style.left = `${startLeft + dx}px`;
                windowDiv.style.top = `${startTop + dy}px`;
            }

            function onMouseUp() {
                isDragging = false;
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
            }
        }

        // 监听键盘事件
        document.addEventListener('keydown', function (event) {
            if (event.altKey && (event.key === 'q' || event.key === 'Q')) {
                if (isWindowCreated) {
                    destroyFloatingWindow();
                } else {
                    createFloatingWindow();
                }
            }
        });
    </script>
    <script>
        function convertKeysToLowerCase(data) {
            const result = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key.toLowerCase()] = data[key];
                }
            }
            return result;
        }

        document.addEventListener('DOMContentLoaded', () => {
            const modalHeader = document.querySelector('.modal-header');
            let isDragging = false;
            let offset = [0, 0];
            const modal = document.querySelector('.modal-content');

            modalHeader.addEventListener('mousedown', (e) => {
                isDragging = true;
                offset = [
                    modal.offsetLeft - e.clientX,
                    modal.offsetTop - e.clientY
                ];
            });

            document.addEventListener('mouseup', () => {
                isDragging = false;
            });

            document.addEventListener('mousemove', (e) => {
                if (isDragging) {
                    modal.style.left = (e.clientX + offset[0]) + 'px';
                    modal.style.top = (e.clientY + offset[1]) + 'px';
                }
            });

            $('.edit-btn').on('click', function () {
                let id = $(this).data('id');
                $.get('/RemoteEdit/GetDetails', { id: id }, function (data) {
                    data = convertKeysToLowerCase(data);
                    if (data.success !== false) {
                        $('#editId').val(data.id || "0");
                        $('#editOldMaterialCode').val(data.oldmaterialcode || "0");
                        $('#editOldMaterialDescription').val(data.oldmaterialdescription || "0");
                        $('#editSupplierShortCode').val(data.suppliershortcode || "0");
                        $('#editResponsibilitySourceSupplierName').val(data.responsibilitysourcesuppliername || "NA");
                        $('#editMIS3').val(data.mis3 || "0");
                        $('#editMIS6').val(data.mis6 || "0");
                        $('#editMIS12').val(data.mis12 || "0");
                        $('#editMIS24').val(data.mis24 || "0");
                        $('#editMIS36').val(data.mis36 || "0");
                        $('#editSMT').val(data.smt || "NA");
                        $('#editLocationCode').val(data.locationcode || "NA");
                        $('#editFaultCode').val(data.faultcode || "NA");
                        $('#editQE').val(data.qe || "NA");
                        // $('#editIdentifiedFaultCode').val(data.identifiedfaultcode || "NA");
                        $('#editModal').modal('show');
                    } else {
                        alert(data.message);
                    }
                }).fail(function () {
                    alert('请求失败');
                });
            });

            $('#editForm').on('submit', function (e) {
                e.preventDefault();
                let formData = $(this).serialize();
                console.log(formData);
                $.post('/RemoteEdit/Edit', formData, function (response) {
                    if (response.success) {
                        $('#editModal').modal('hide');
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                }).fail(function () {
                    alert('提交失败');
                });
            });
        });
    </script>

}