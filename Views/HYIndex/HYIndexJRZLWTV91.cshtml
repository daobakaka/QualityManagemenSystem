@model WebWinMVC.Models.JRZLWTViewModel
@{
    ViewData["Title"] = "即日质量问题";
    ViewBag.Username = @Context.Session.GetString("Username");
    ViewBag.Name = @Context.Session.GetString("Name");
    ViewBag.Role = @Context.Session.GetString("Role");
    ViewBag.Group = @Context.Session.GetString("Group");
    ViewBag.Phone = @Context.Session.GetString("Phone");
    ViewBag.IsLoggedIn = true;
}
<div>
    <h2 class="responsive-heading">@Model.AdditionalInfo</h2>
</div>
<!-- 第一个表格（已经添加 data-label） -->
<div style="display:block;">
    <div class="justify-content-center align-items-center">
        <div class="datatable-container">
            <div class="row">
                <div class="d-flex justify-content-center">
                    <table id="example" class="table table-bordered table-striped">
                        <thead style="margin-top:0.3vh; ">
                            <tr>
                                <th>旧物料代码</th>
                                <th>旧物料描述</th>
                                <th>短代码</th>
                                <th>供应商名称</th>
                                <th>车型</th>
                                <th>问题属性</th>
                                <th>案例数</th>
                                <th>3MIS</th>
                                <th>6MIS</th>
                                <th>12MIS</th>
                                <th>24MIS</th>
                                <th>48MIS</th>
                                <th>SMT</th>
                                <th>部位码</th>
                                <th>故障码</th>
                                <th>断点次数</th>
                                <th>断点失效</th>
                                <th>QE</th>
                                <th>识别故障模式</th>
                                <th>SFCIA</th>
                                <th>已纳入SIL</th>
                                <th>PQS编号</th>
                                <th>断点时间</th>
                                <th>立项时间</th>
                                <th>备注</th>
                                <th>VID</th>
                                <th>操作</th> <!-- 新增操作列 -->
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ChecklistV91s)
                            {
                                // 定义一个布尔变量来决定是否渲染该行
                                bool shouldRender = false;

                                // 情况1: Role 为 A 或 B，显示所有数据
                                if (ViewBag.Role == "A" || ViewBag.Role == "B")
                                {
                                    shouldRender = true;
                                }
                                // 情况2: Role 为 C，且 Group 为 1 或 2
                                else if (ViewBag.Role == "C" && ((string)ViewBag.Group == "1" || (string)ViewBag.Group == "2"))
                                {
                                    var qesForFilter = Model.UserAuthentications
                                    .Where(u => u.Group == ViewBag.Group)
                                    .Select(u => u.Name)
                                    .ToList();

                                    // 如果当前行的 QE 值属于数据库中的查询结果，显示该行
                                    shouldRender = qesForFilter.Contains(item.QE);
                                }
                                // 情况3: Role 为 D，显示所有 QE 为当前用户的行
                                else if (ViewBag.Role == "D" && item.QE == ViewBag.Name)
                                {
                                    shouldRender = true;
                                }

                                // 根据 shouldRender 的值来渲染该行
                                if (shouldRender)
                                {
                                    <tr>
                                        <td data-label="旧物料代码">
                                            <span class="dynamic-tooltip"
                                                  data-old-material-code="@item.OldMaterialCode"
                                                  data-remote-tooltip="true" title="loading..">
                                                @item.OldMaterialCode
                                            </span>
                                            <div class="loading-indicator">Loading...</div>
                                        </td>
                                        <td data-label="旧物料描述">
                                            <span data-toggle="tooltip" title="@item.OldMaterialDescription">@item.OldMaterialDescription</span>
                                        </td>
                                        <td data-label="短代码"> @item.SupplierShortCode</td>
                                        <td data-label="供应商名称">@item.ResponsibilitySourceSupplierName</td>
                                        <td data-label="车型">@item.FilteredVehicleModel</td>
                                        <td data-label="问题属性">
                                            <span data-toggle="tooltip" title="@item.IssueAttributes">@item.IssueAttributes</span>
                                        </td>
                                        <td data-label="案例数">@item.CaseCount</td>
                                        <td data-label="3MIS">@item.MIS3</td>
                                        <td data-label="6MIS">@item.MIS6</td>
                                        <td data-label="12MIS">@item.MIS12</td>
                                        <td data-label="24MIS">@item.MIS24</td>
                                        <td data-label="48MIS">@item.MIS48</td>
                                        <td data-label="SMT">@item.SMT</td>
                                        <td data-label="部位码">@item.LocationCode</td>
                                        <td data-label="故障码">@item.FaultCode</td>
                                        <td data-label="断点次数">@item.BreakdownCount</td>
                                        <td data-label="断点失效">@item.IsBreakdownInvalid</td>
                                        <td data-label="QE">@item.QE</td>
                                        <td data-label="识别故障模式">@item.IdentifiedFaultMode</td>
                                        <td data-label="SFCIA">@item.ServiceFaultIdentificationAccurate</td>
                                        <td data-label="已纳入SIL">@item.IncludedInSIL</td>
                                        <td data-label="PQS编号">@item.PQSNumber</td>
                                        <td data-label="断点时间">@item.BreakpointTime</td>
                                        <td data-label="立项时间">@item.StartTime</td>
                                        <td data-label="备注">@item.Remarks</td>
                                        <td data-label="VID">@item.ProjectIdentifier</td>
                                        <td data-label="操作">
                                            @if (string.IsNullOrEmpty(item.Remarks))
                                            {
                                                <button type="submit" class="btn btn-primary btn-sm edit-btn" data-id="@item.ID" data-bs-toggle="modal" data-bs-target="#editModal">编辑</button>
                                            }
                                            else
                                            {
                                                // 判断 item.Remarks 是否为 "问题变更"
                                                if (item.Remarks == "问题变更".Trim())
                                                {
                                                    <button type="submit" class="btn btn-warning btn-sm edit-btn" data-id="@item.ID" data-bs-toggle="modal" data-bs-target="#editModal">编辑</button>
                                                }
                                                else
                                                {
                                                    <button type="submit" class="btn btn-success btn-sm edit-btn" data-id="@item.ID" data-bs-toggle="modal" data-bs-target="#editModal">编辑</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- 下侧交互区域 -->
<div class="userInput-container">
    <div class="row">
        <!-- 搜索区域，占据屏幕的1/3宽度，且居中对齐 -->
        <div class="col-md-2 d-flex justify-content-center align-items-center">
            <div>
                <form id="searchForm">
                    <div class="form-group">
                        <input type="text" class="form-control" id="searchByCarNumber" placeholder="输入车号或底盘号" style=" margin-top:1vh">
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="searchByMaterialNumber" placeholder="输入物料号" style=" margin-top:1vh">
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="searchByPQSNumber" placeholder="输入PQS编号" style=" margin-top:1vh">
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="searchByDate" placeholder="选择日期" style=" margin-top:1vh">
                    </div>
                </form>
                <button type="button" class="btn btn-outline-secondary mb-2" style="width: 100% ;margin-top:1.5vh" onclick="resetFilters()">重置</button>
            </div>
        </div>



        <!-- 搜索结果区域，占据屏幕的2/3宽度，且居中对齐 -->
        <div class="col-md-8 d-flex justify-content-center align-items-center">
            <div class="custom-container">
                <div class="row">
                    <div class="d-flex justify-content-center">
                        <table id="queryTable" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>日期</th>
                                    <th>车型</th>
                                    <th>旧物料</th>
                                    <th>描述</th>
                                    <th>短代码</th>
                                    <th>供应商</th>
                                    <th>案例数</th>
                                    <th>断点次数</th>
                                    <th>3MIS</th>
                                    <th>6MIS</th>
                                    <th>12MIS</th>
                                    <th>24MIS</th>
                                    <th>48MIS</th>
                                    <th>SMT</th>
                                    <th>部位码</th>
                                    <th>故障码</th>
                                    <th>PQS编号</th>
                                    <th>编辑人</th>
                                    <th>编辑日期</th>
                                    <th>VAN</th>
                                    <th>VIN</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.ChecklistV91Queries)
                                {
                                    <tr>
                                        <td data-label="日期">@item.ApprovalDate</td>
                                        <td data-label="车型">@item.VehicleModel</td>
                                        <td data-label="旧物料">
                                            <span class="dynamic-tooltip"
                                                  data-old-material-code="@item.OldMaterialCode"
                                                  data-remote-tooltip="true" title="loading..">
                                                @item.OldMaterialCode
                                            </span>
                                            <div class="loading-indicator">Loading...</div>
                                        </td>
                                        <td data-label="描述">@item.OldMaterialDescription</td>
                                        <td data-label="短代码">@item.SupplierShortCode</td>
                                        <td data-label="供应商">@item.ResponsibilitySourceSupplierName</td>
                                        <td data-label="案例数">@item.CaseCount</td>
                                        <td data-label="断点次数">@item.BreakPointNum</td>
                                        <td data-label="3MIS">@item.MIS3</td>
                                        <td data-label="6MIS">@item.MIS6</td>
                                        <td data-label="12MIS">@item.MIS12</td>
                                        <td data-label="24MIS">@item.MIS24</td>
                                        <td data-label="48MIS">@item.MIS48</td>
                                        <td data-label="SMT">@item.SMT</td>
                                        <td data-label="部位码">@item.LocationCode</td>
                                        <td data-label="故障码">@item.FaultCode</td>
                                        <td data-label="PQS编号">@item.PQSNumber</td>
                                        <td data-label="编辑人">@item.EditedBody</td>
                                        <td data-label="编辑日期">@item.EditedDate</td>
                                        <td data-label="VAN">@item.VAN</td>
                                        <td data-label="VIN">@item.VIN</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>



        <!-- 一键处理区域 -->
        <div class="col-md-2 d-flex justify-content-center align-items-center">

            <div class="result-container d-flex flex-column align-items-center">
                <button type="button" class="btn btn-outline-secondary mb-2" style="width: 100%;" onclick="exportTableToExcelAnalyse()">清单导出</button>
                <button type="button" class="btn btn-outline-secondary mb-2" style="width: 100%;" onclick="exportTableToExcelQuery()">查询导出</button>
                <button type="button" class="btn btn-outline-secondary mb-2" style="width: 100%;" onclick="showOnePageModal()">立项</button>
            </div>

        </div>
    </div>
</div>
@* 模块编辑区域 *@
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal header (for dragging) -->
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel" style="text-align: center; width: 100%;">@ViewBag.Name 编辑记录</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editForm" method="post">
                    @Html.AntiForgeryToken() <!-- 添加防伪令牌 -->
                    <!-- Hidden fields -->
                    <input type="hidden" id="editId" name="ID" />
                    <input type="hidden" id="editOldMaterialCode" name="OldMaterialCode" />
                    <input type="hidden" id="editOldMaterialDescription" name="OldMaterialDescription" />
                    <input type="hidden" id="editSupplierShortCode" name="SupplierShortCode" />
                    <input type="hidden" id="editResponsibilitySourceSupplierName" name="ResponsibilitySourceSupplierName" />
                    <input type="hidden" id="editFilteredVehicleModel" name="FilteredVehicleModel" />
                    <input type="hidden" id="editCaseCount" name="CaseCount" />
                    <input type="hidden" id="editMIS3" name="MIS3" />
                    <input type="hidden" id="editMIS6" name="MIS6" />
                    <input type="hidden" id="editMIS12" name="MIS12" />
                    <input type="hidden" id="editMIS24" name="MIS24" />
                    <input type="hidden" id="editMIS48" name="MIS48" />
                    <input type="hidden" id="editSMT" name="SMT" />
                    <input type="hidden" id="editLocationCode" name="LocationCode" />
                    <input type="hidden" id="editFaultCode" name="FaultCode" />
                    <input type="hidden" id="editQE" name="QE" />
                    <input type="hidden" id="editBreakdownCount" name="BreakdownCount" />
                    <input type="hidden" id="editIsBreakdownInvalid" name="IsBreakdownInvalid" />
                    <input type="hidden" id="editIssueAttributes" name="IssueAttributes" />
                    <input type="hidden" id="editRowVersion" name="RowVersion" /> <!-- 使用 RowVersion -->
                    <!-- Display fields -->
                    <div class="form-group">
                        <input type="text" class="form-control" name="ServiceFaultIdentificationAccurate" id="editServiceFaultIdentificationAccurate" placeholder="SFCIA" required style="margin-top: 1vh;" />
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" name="IdentifiedFaultMode" id="editIdentifiedFaultMode" placeholder="识别故障模式" required style="margin-top: 1vh;" />
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" name="IncludedInSIL" id="editIncludedInSIL" placeholder="已纳入SIL" required style="margin-top: 1vh;" />
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" name="PQSNumber" id="editPQSNumber" placeholder="PQS编号" required style="margin-top: 1vh;" />
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" name="BreakpointTime" id="editBreakpointTime" placeholder="断点时间" required style="margin-top: 1vh;" />
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" name="StartTime" id="editStartTime" placeholder="立项时间" required style="margin-top: 1vh;" />
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" name="Remarks" id="editRemarks" placeholder="备注" required style="margin-top: 1vh;" />
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" name="ProjectIdentifier" id="editProjectIdentifier" placeholder="VID" required style="margin-top: 1vh;" />
                    </div>
                    <div style="text-align: center;">
                        <button type="button" class="btn btn-outline-secondary mb-2" id="editQEChange"
                                style="display: inline-block; margin-top: 2vh; margin-left: 2vh;">
                            QE变更
                        </button>
                        <button type="button" class="btn btn-outline-secondary mb-2" id="editProblemChange" style="display: inline-block; margin-top: 2vh; margin-left: 2vh;">
                            问题变更
                        </button>
                        <button type="submit" class="btn btn-outline-secondary mb-2" style="display: inline-block; margin-top: 2vh; margin-left: 2vh;">
                            保存更改
                        </button>
                    </div>
                </form>
                <!-- 并发冲突提示 -->
                <div id="concurrencyConflict" class="alert alert-danger" style="display:none; margin-top: 1vh;">
                    <strong>并发冲突：</strong>该记录已被其他用户修改。请刷新并重新编辑。
                </div>
            </div>
        </div>
    </div>
</div>

@* QE更换区域 *@
<div class="modal fade" id="editQEChangeModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel" style="text-align: center; width: 100%;">@ViewBag.Name 编辑记录</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editForm" method="post">
                    @Html.AntiForgeryToken()
                    <!-- Dynamic QE dropdown -->
                    <div class="form-group" style="margin-bottom :2vh">
                        <select id="editQEChoose" name="QE" style="margin-top :2vh" class="form-control" required>
                            <option value="">选择QE</option> <!-- 默认空选项 -->
                        </select>
                    </div>

                    <!-- Save button -->
                    <div style="text-align: center;">
                        <button type="button" id="editQESubmit" class="btn btn-outline-secondary mb-2" style="display: inline-block; margin-top: 2vh; margin-left: 2vh;">
                            保存更改
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- 选项模态框 -->
<!-- Modal -->
<div class="modal fade" id="optionsModalOP" tabindex="-1" aria-labelledby="optionsModalLabelOP" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel" style="text-align: center; width: 100%;">问题来源</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <button type="button" class="btn btn-outline-secondary w-100 mb-2" onclick="showDailyQualityModalOP()">即日质量问题</button>
                <button type="button" class="btn btn-outline-secondary w-100 mb-2" onclick="generatePPT('TOP问题')">TOP问题</button>
                <button type="button" class="btn btn-outline-secondary w-100 mb-2" onclick="generatePPT('24小时问题')">24小时问题</button>
                <button type="button" class="btn btn-outline-secondary w-100 mb-2" onclick="openServiceCenterModalOP()">服务中心问题</button>
                <button type="button" class="btn btn-outline-secondary w-100 mb-2" onclick="openServiceCenterModalOP()">其他问题</button>
            </div>
        </div>
    </div>
</div>

<!-- Service Center Modal -->
<div class="modal fade" id="serviceCenterModalOP" tabindex="-1" aria-labelledby="serviceCenterModalLabelOP" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal header removed -->
            <div class="modal-body">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel" style="text-align: center; width: 100%;">服务中心问题</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="serviceCenterFormOP">
                    @Html.AntiForgeryToken()
                    <input type="text" class="form-control" id="caseNumberOPS" placeholder="输入案例数" required style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="customerVehicleNumberOPS" placeholder="输入客户车辆数" required style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="materialNumberOPS" placeholder="输入物料号" required style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="queryDateOPS" placeholder="查询日期" required style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="faultModeOPS" placeholder="输入故障模式" required style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="faultCodeOPS" placeholder="输入故障码(可选)" required style="margin-top: 1vh;">
                </form>
                <button type="button" class="btn btn-outline-secondary mb-2" style="margin-top: 2vh; display: block; margin-left: auto; margin-right: auto;"
                        onclick="generateServiceCenterReportOP()">
                    生成报告
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Daily Quality Modal -->
<div class="modal fade" id="dailyQualityModalOP" tabindex="-1" aria-labelledby="dailyQualityModalLabelOP" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal header removed -->
            <div class="modal-body">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel" style="text-align: center; width: 100%;">即日质量问题</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

                </div>
                <!-- Error message container -->
                <!-- 对于纳入SIL系统，目前暂时拟定两个必须参数，物料号和车号，其他参数为可选-->
                <form id="dailyQualityFormOP">
                    @Html.AntiForgeryToken()
                    <input type="text" class="form-control" id="materialNumberOP" name="OldMaterialCode" placeholder="输入物料号(必填)" required style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="queryDateOP" name="ApprovalDate" placeholder="审核通过日期(可选)" style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="faultCodeOP" name="FaultCode" placeholder="输入故障码(可选)" style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="breakpointTimeOP" name="ManufacturingMonth" placeholder="断点时间(可选)" style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="vehicleNumberOP" name="VehicleIdentification" placeholder="输入车号或底盘号(一页纸可选)，SIL必填" style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="faultModeOP" name="FaultDescription" placeholder="输入故障描述(可选)" style="margin-top: 1vh;">
                    <input type="text" class="form-control" id="failureConditionOP" name="FailureConditionOP" placeholder="输入失效工况(可选)" style="margin-top: 1vh;">
                </form>
                <div style="display:flex;">
                    <button type="button" class="btn btn-outline-secondary mb-2" style="margin-top: 2vh; display: block; margin-left: auto; margin-right: auto;"
                            onclick="submitFormAndGeneratePPT(dataStoreOnePage.pageMode.DAILY_QUALITY)">
                        一页纸
                    </button>
                    <button type="button" class="btn btn-outline-secondary mb-2" style="margin-top: 2vh; display: block; margin-left: auto; margin-right: auto;"
                            onclick="submitToSIL()">
                        纳入SIL
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Error message container -->
@* <div id="error-message" style="display:none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
z-index: 9999; color: blue; font-weight: normal; padding: 10px; background-color: transparent; border: none; font-size: 18px;"></div> *@

@section Scripts {
    <script>
        var dataStore = {
            tooltipContentCache: '',
            dataTooltipFilter: '',
        };

        var cubeHeightsTotal = [];
        var editBodyName = JSON.stringify("@ViewBag.Name");
        var dataStoreOnePage = {
            problemDescription: [
                "问题来源内容",
                "问题定义内容",
                "NA",
                "开启日期内容",
                "供应商内容",
                "涉及车型内容",
                "内部车型内容",
                "底盘号内容",
                "生产/购车时间内容",
                "NA",
                "NA"
            ],
            failureSituation: [
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "是",
                "是",
                "0",
                "否",
                "低",
                "高"
            ],
            textTitleOP: "一页纸",
            pageMode: {
                DAILY_QUALITY: '即日质量问题',
                TOP_ISSUES: 'TOP问题',
                TWENTY_FOUR_HOURS: '24小时问题',
                SERVICE_CENTER: '服务中心问题',
                OTHER_ISSUES: '其他问题'
            },
            contentOPCache: {}, // 修正了这里的错误
        };

    </script>@* 全局变量模块 *@
    <script>
        $(document).ready(function () {
            jQuery('[data-remote-tooltip]').tooltip({
                trigger: 'manual',
                html: true
            });

            $('.dynamic-tooltip').on('mouseenter', function () {
                let $this = $(this);
                let oldMaterialCode = $this.data('old-material-code');
                let row = $this.closest('tr');
                let supplierShortCode = row.find('[data-label="短代码"]').text().trim();
                let filteredVehicleModel = row.find('[data-label="车型"]').text().trim();


                let $loadingIndicator = $this.find('.loading-indicator');
                let dateRange = $('#searchByDate').val(); // 获取输入框的值

                // 显示加载指示器
                $loadingIndicator.show();
                $.ajax({
                    url: '/queryAPI/remotetooltip/tooltipdata',
                    method: 'GET',
                    data: {
                        oldMaterialCode: oldMaterialCode,
                        dateRange: dateRange,
                        supplierShortCode: supplierShortCode,
                        filteredVehicleModel: filteredVehicleModel,
                    },
                    success: function (data) {
                        // console.log('Data type:', typeof data); // 检查数据类型
                        // console.log(data);
                        dataStore.tooltipContentCache = data;
                        console.log(dataStore.tooltipContentCache);
                        // 数据是一个数组，迭代所有记录来生成内容
                        data.sort((a, b) => {
                            // 这里假设制造月是一个字符串形式的日期，格式是 'YYYYMM'
                            return b.manufacturingMonth.localeCompare(a.manufacturingMonth);
                        });
                        let tooltipContent = data.map(item => `制造月：${item.manufacturingMonth} ；MIS区间：${item.misInterval}；VAN：${item.van}；MIS：${item.mis}；CODE：${item.faultCodeDescription}；供应商：${item.responsibilitySourceSupplierName}；短代码：${item.supplierShortCode}；旧物料号：${item.oldMaterialCode}；车型：${item.filteredVehicleModel}；服务单号：${item.serviceOrder}；FDP：${item.fdp}；S.D：${item.salesDate}；故障描述：${item.faultDescription
                            }`).join('\n');

                        // 更新 tooltip 内容
                        $this.attr('title', tooltipContent);
                        $this.tooltip('update');

                        // 隐藏加载指示器
                        $loadingIndicator.hide();
                    },
                    error: function () {
                        $this.attr('title', 'Error loading data');
                        $this.tooltip('update');

                        // 隐藏加载指示器
                        $loadingIndicator.hide();
                    }
                });
            }).on('mouseleave', function () {
                $(this).tooltip('hide');
            });
        });
    </script>@*  显示remote tooltip 执行事件 *@
    <script>
        /* 显示datatable 以及用户区域 以及执行查询区域  用户查询表滚轮同步事件  */
        $(window).on('load', function () {
            $('#example').DataTable({
                "paging": true,
                "pageLength": 25, // 设置默认每页显示25条记录
                "ordering": true,
                "order": [], // 禁用初始排序
                "columnDefs": [
                    { "orderable": false, "targets": 0 } // 禁用第3列的排序
                ],
                "info": true,
                "searching": true,
                "language": {
                    "lengthMenu": "显示 _MENU_ 条记录", // 自定义每页显示条数的文本
                    "search": "查询:", // 自定义搜索框的标签
                    "info": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项", // 自定义表格信息的文本
                    "infoEmpty": "显示第 0 至 0 项结果，共 0 项", // 当表格为空时显示的文本
                    "infoFiltered": "(由 _MAX_ 项结果过滤)", // 当表格被过滤时显示的文本
                    "paginate": {
                        "first": "首页", // 自定义“首页”按钮的文本
                        "last": "末页", // 自定义“末页”按钮的文本
                        "next": "下一页", // 自定义“下一页”按钮的文本
                        "previous": "上一页" // 自定义“上一页”按钮的文本
                    },
                    "zeroRecords": "没有匹配的记录", // 当搜索结果为空时显示的文本
                    "emptyTable": "表中数据为空", // 当表格没有数据时显示的文本
                    "loadingRecords": "加载中...", // 数据加载时显示的文本
                    "processing": "处理中...", // 数据处理时显示的文本
                    "aria": {
                        "sortAscending": ": 以升序排列此列",
                        "sortDescending": ": 以降序排列此列"
                    }
                },
                "initComplete": function () {
                    let api = this.api();
                    // api.column(12).search('@Html.Raw(ViewBag.Name)').draw(); // 这里的'默认值'可以替换为你想要的初始搜索条件
                }

            });
            $('#example').show();

        });

        window.addEventListener('load', function () {
            // 显示用户输入区域
            document.querySelector('.userInput-container').style.display = 'block';
            console.log(`dispaly!!!!!!!!!!!!!!!!!!!!!!!`);

        });
        console.log(`startMove!!!!!!!!!!!!!!!!!!!!!!!false`);
        // 对于 .custom-container
        document.querySelector('.custom-container .table tbody').addEventListener('scroll', function () {
            const tbody = this;
            const thead = document.querySelector('.custom-container .table thead');

            // 获取最大可滚动距离
            const maxScrollLeft = tbody.scrollWidth - tbody.clientWidth;
            // 定义滚动限制为90%
            const scrollLimit = maxScrollLeft * 1;

            // 如果当前滚动位置超过限制，固定滚动位置
            if (tbody.scrollLeft > scrollLimit) {
                tbody.scrollLeft = scrollLimit;
            }

            // 同步表头滚动
            thead.scrollLeft = tbody.scrollLeft;
        });

        // 对于 .datatable-container
        document.querySelector('.datatable-container .table tbody').addEventListener('scroll', function () {
            const tbody = this;
            const thead = document.querySelector('.datatable-container .table thead');

            // 获取最大可滚动距离
            const maxScrollLeft = tbody.scrollWidth - tbody.clientWidth;
            // 定义滚动限制为90%
            const scrollLimit = maxScrollLeft * 1;

            // 如果当前滚动位置超过限制，固定滚动位置
            if (tbody.scrollLeft > scrollLimit) {
                tbody.scrollLeft = scrollLimit;
            }

            // 同步表头滚动
            thead.scrollLeft = tbody.scrollLeft;
        });


    </script> @* datatable 用于编辑的表格 *@
    <script>
        let isWindowCreated = false;
        let floatingWindowDiv = null;
        // 创建悬浮窗口
        function createFloatingWindow() {
            if (isWindowCreated) return; // 防止重复创建窗口
            isWindowCreated = true;

            // 创建悬浮窗口
            const windowDiv = document.createElement('div');
            windowDiv.id = 'floatingWindow';
            windowDiv.style.position = 'fixed';
            windowDiv.style.top = '10%';
            windowDiv.style.left = '10%';
            windowDiv.style.width = '80vw';
            windowDiv.style.height = '80vh';
            windowDiv.style.backgroundColor = 'white';
            windowDiv.style.border = '3px solid black';
            windowDiv.style.zIndex = 1000;
            windowDiv.style.overflow = 'hidden';
            document.body.appendChild(windowDiv);

            floatingWindowDiv = windowDiv; // 赋值给 floatingWindowDiv

            // 创建并插入图表容器
            const chartDiv = document.createElement('div');
            chartDiv.id = 'panelContent';
            chartDiv.style.width = '100%';
            chartDiv.style.height = '100%';
            chartDiv.style.position = 'relative';
            windowDiv.appendChild(chartDiv);

            // 创建拖拽区域
            const dragArea = document.createElement('div');
            dragArea.style.position = 'absolute';
            dragArea.style.top = '0';
            dragArea.style.left = '0';
            dragArea.style.width = '50px';
            dragArea.style.height = '50px';
            dragArea.style.backgroundColor = 'rgba(0.1, 0.1, 0.1, 0.1)';
            dragArea.style.cursor = 'move';
            dragArea.style.borderRadius = '50%';
            windowDiv.appendChild(dragArea);

            //------------------------------------- 初始化拖拽功能
            initializeDrag(dragArea, windowDiv);

            plotData(dataStore.tooltipContentCache);



        }
        // 销毁悬浮窗口
        function destroyFloatingWindow() {
            if (!isWindowCreated) return;
            document.body.removeChild(floatingWindowDiv);
            floatingWindowDiv = null;
            isWindowCreated = false;
        }
        //--
        function getBreakpointTimes(dataTooltipFilter) {
            // 判断传入的参数是否为空
            if (!dataTooltipFilter) {
                console.log("Invalid input: Missing required parameters.");
                return []; // 返回空数组，避免继续执行
            }

            // 提取数据
            const oldMaterialCode = dataTooltipFilter.oldMaterialCode;
            const filteredVehicleModel = dataTooltipFilter.filteredVehicleModel;
            const supplierShortCode = dataTooltipFilter.supplierShortCode;

            // 创建请求参数
            const requestDataForBK = {
                oldMaterialCode: oldMaterialCode,
                supplierShortCode: supplierShortCode,
                filteredVehicleModel: filteredVehicleModel,
            };
            let cubeHeightsTemp = [];  // 定义一个临时数组，初始化为空

            // 发起 AJAX 请求到后端
            $.ajax({
                url: '/queryAPI/RemoteAccess/dataStoreFilter', // 你的后端 API 路径
                method: 'GET',
                data: requestDataForBK,
                success: function (response) {
                    // 假设返回的断点时间数组是 response.breakpointTimes
                    const breakpointTimes = response.breakpointTimes;

                    // 如果返回的断点时间为空，则直接返回
                    if (!breakpointTimes || breakpointTimes.length === 0) {
                        console.log("No breakpoint times found.");
                        return;
                    }

                    //
                    breakpointTimes.forEach(time => {
                        cubeHeightsTemp.push(time);  // 将每个断点时间加入临时数组
                    });

                    console.log('Mapped Cube Heights:', cubeHeightsTemp);
                },
                error: function (error) {
                    console.log('Error fetching breakpoint times:', error);
                }
            });

            return cubeHeightsTemp;  // 返回数组（但是由于 AJAX 请求是异步的，实际值可能为空）
        }





        // 处理数据并绘制图表
        function plotData(data) {
            // 定义函数将值映射到指定范围
            const mapToRange = (value, min, max) => {
                if (value < min) return min;
                if (value > max) return max;
                return value;
            };

            // 定义函数将制造日期映射到 0 到 50 的范围
            const mapDateToRange = (dateStr) => {
                const year = parseInt(dateStr.substring(0, 4), 10);
                const yearOffset = 2015;
                const minYear = 2015;
                const maxYear = 2026;
                return mapToRange((year - yearOffset) / (maxYear - minYear) * 50, 0, 50);
            };
            const mapSalesDateToRange = (dateStr) => {
                const year = parseInt(dateStr.substring(0, 4), 10); // 提取年份
                const yearOffset = 2015; // 基准年份
                const minYear = 2015; // 最小年份
                const maxYear = 2026; // 最大年份

                // 检查年份是否在有效范围内
                if (year < minYear || year > maxYear) {
                    return 50; // 如果不在范围内，返回默认值
                }

                return mapToRange((year - yearOffset) / (maxYear - minYear) * 50, 0, 50); // 映射到 0 到 50 的范围
            };


            const mapDateToRangeForFilter = (dateStr) => {
                const year = parseInt(dateStr.substring(0, 4), 10);
                const yearOffset = 2015;
                const minYear = 2015;
                const maxYear = 2026;
                return mapToRange((year - yearOffset) / (maxYear - minYear) * 50, 0, 50);
            };

            // 解析和处理数据
            const processedData = data
                .filter(item => {
                    const manufacturingYear = parseInt(item.manufacturingMonth.substring(0, 4), 10);
                    return manufacturingYear >= 2015 && manufacturingYear <= 2026;
                })
                .map(item => {
                    let x = parseFloat(item.mis);
                    let y = mapSalesDateToRange(item.salesDate); // 将销售日期映射到 Y 轴
                    let z = mapDateToRange(item.manufacturingMonth);
                    let noiseX = (Math.random() - 0.5) * 2; // X方向噪声
                    let noiseY = (Math.random() - 0.5) * 2; // Y方向噪声
                    let noiseZ = (Math.random() - 0.5) * 2; // Z方向噪声

                    // 更新 X, Y, Z 值
                    x += noiseX;
                    y += noiseY;
                    z += noiseZ;
                    // 处理 X 轴数据，保持在 -1 到 50 的范围内,捕捉未售卖的车辆
                    x = x > 50 ? 0 : x;
                    x = mapToRange(x, -1.5, 50);
                    // 处理 Z 轴数据
                    return { x, y, z, original: item };
                });

            const xValues = processedData.map(item => item.x);
            const yValues = processedData.map(item => item.y);
            const zValues = processedData.map(item => item.z);
            const textValues = processedData.map(item => `MIS:${item.original.mis}<br>VAN:${item.original.van}<br>M.O.D:${item.original.manufacturingMonth}<br>S.D:${item.original.salesDate}<br>FDP:${item.original.fdp}<br>OEM:${item.original.responsibilitySourceSupplierName}<br>V:${item.original.filteredVehicleModel}<br>S.O:${item.original.serviceOrder}<br>F.C.D:${item.original.faultCodeDescription} `);
            // 打印值
            // console.log('X Values:', xValues);
            // console.log('Y Values:', yValues);
            // console.log('Z Values:', zValues);
            // 计算 Z 轴的刻度值和标签
            const zTickvals = Array.from({ length: 12 }, (_, i) => i * 4.16);
            const zTicktext = Array.from({ length: 12 }, (_, i) => 2015 + i).map(year => year.toString());

            // 计算 Y 轴的刻度值和标签
            const yTickvals = Array.from({ length: 12 }, (_, i) => i * 4.16); // 根据需要调整范围
            const yTicktext = Array.from({ length: 12 }, (_, i) => 2015 + i).map(year => year.toString());

            //-----
            //----  建立新的遍历表
            console.log("开始进行 传入断点分析表绘图的新方法");
            for (let i = 0; i < dataStore.tooltipContentCache.length; i++) {
                let item = dataStore.tooltipContentCache[i];
                dataTooltipFilte = null;//将过滤器清空
                // 判断条件是否满足
                if (item.oldMaterialCode && item.filteredVehicleModel && item.supplierShortCode) {
                    dataStore.dataTooltipFilter = item;  // 如果找到符合条件的项，赋值并退出循环
                    console.log("找到符合条件的断点识别项原始:...." + item);
                    console.log(dataStore.dataTooltipFilter);
                            break;  // 找到一个符合条件的项后，跳出循环
                }
            }
            // 如果找到符合条件的项，dataTooltipFilter 将会是该项

            //生成临时表
            let cubeHeightsTemp = getBreakpointTimes(dataStore.dataTooltipFilter);
            console.log(cubeHeightsTemp);

            if (cubeHeightsTemp.length>=1) {
                console.log("存在断点,执行坐标转换步骤");
                for (i = 0; i <= cubeHeightsTemp.length; i++) {
                    cubeHeightsTotal[i] = mapDateToRangeForFilter(cubeHeightsTemp[i]);
                    console.log(cubeHeightsTotal[i]);
                }
                //转换为断点图
            }
            //----------------------------------- 处理数据并绘制图表

            // 绘制图表
            plotChart(xValues, yValues, zValues, textValues, zTickvals, zTicktext, yTickvals, yTicktext);
        }

        // 绘制图表
        function plotChart(xValues, yValues, zValues, textValues, zTickvals, zTicktext, yTickvals, yTicktext) {

            const colorsForA = zValues.map(z => {
                const r = Math.round((1 - z / 50) * 255);
                const g = Math.round((1 - (50 - z) / 50) * 255);
                const b = Math.round((1 - (50 - z) / 50) * 255);
                return `rgb(${r}, ${g}, ${b})`;
            });

            const scatterTrace = {
                x: xValues,
                y: yValues,
                z: zValues,
                mode: 'markers',
                type: 'scatter3d',
                marker: {
                    size: 5,
                    color: zValues,
                    colorscale: [[0, 'green'], [0.5, 'yellow'], [1, 'red']],
                    colorbar: {
                        title: 'M.O.D'
                    },
                    opacity: 0.5,
                },
                text: textValues,
                hoverinfo: 'text',
                hoverlabel: {
                    align: 'left',
                    bgcolor: 'rgba(0,255,255,0.7)',
                    font: {
                        family: 'Arial, sans-serif',
                        size: 12,
                        color: '#000000'
                    }
                }
            };
            let cubeTraces;

            if (cubeHeightsTotal)
                cubeTraces = cubeHeightsTotal.map(zHeight => ({
                    type: 'mesh3d',
                    x: [0, 50, 50, 0, 0, 50, 50, 0],
                    y: [0, 0, 50, 50, 0, 0, 50, 50],
                    z: [zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight],
                    i: [0, 0, 1, 1, 4, 4, 5, 5],
                    j: [1, 2, 2, 3, 5, 6, 6, 7],
                    k: [2, 3, 3, 4, 6, 7, 7, 4],
                    opacity: 0.1,
                    color: 'rgba(0,0,255,0.2)', // 半透明蓝色
                    hoverinfo: 'none', // 取消鼠标提示
                    // text: [zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight].map(z => `Z: ${z}`),
                    // hoverinfo: 'text'
                    showlegend: false, // 不显示图例
                }));
            else
                cubeTraces = [1].map(zHeight => ({
                    type: 'mesh3d',
                    x: [0, 50, 50, 0, 0, 50, 50, 0],
                    y: [0, 0, 50, 50, 0, 0, 50, 50],
                    z: [zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight],
                    i: [0, 0, 1, 1, 4, 4, 5, 5],
                    j: [1, 2, 2, 3, 5, 6, 6, 7],
                    k: [2, 3, 3, 4, 6, 7, 7, 4],
                    opacity: 0.1,
                    color: 'rgba(0,0,255,0.2)', // 半透明蓝色
                    hoverinfo: 'none', // 取消鼠标提示
                    // text: [zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight, zHeight].map(z => `Z: ${z}`),
                    // hoverinfo: 'text'
                    showlegend: false, // 不显示图例
                }));

            // 图表布局
            const layout = {
                title: '质量问题散点分析图',
                scene: {
                    xaxis: { title: 'MIS' },
                    yaxis: {
                        title: 'S.D',
                        tickvals: yTickvals,
                        ticktext: yTicktext,
                        range: [0, 50] // 固定 Y 轴范围
                    },
                    zaxis: {
                        title: 'M.O.D',
                        tickvals: zTickvals,
                        ticktext: zTicktext,
                        range: [0, 50] // 固定 Y 轴范围
                    },
                    camera: {
                        eye: { x: 1.25, y: 1.25, z: 1.25 }
                    }
                },
                margin: { t: 50, b: 50 }
            };

            // 配置
            const config = {
                displayModeBar: false,
                modeBarButtonsToRemove: ['zoom2d', 'pan2d', 'editInChartStudio'],
                modeBarButtonsToAdd: ['resetScale2d']
            };

            // 绘制图表
            Plotly.newPlot('panelContent', [scatterTrace, ...cubeTraces], layout, config);
        }



        // 初始化拖拽功能
        function initializeDrag(dragArea, windowDiv) {
            let isDragging = false;
            let startX, startY, startLeft, startTop;

            dragArea.addEventListener('mousedown', (e) => {
                e.preventDefault();

                isDragging = true;
                const rect = windowDiv.getBoundingClientRect();
                startX = e.clientX;
                startY = e.clientY;
                startLeft = rect.left;
                startTop = rect.top;

                document.addEventListener('mousemove', onMouseMove);
                document.addEventListener('mouseup', onMouseUp);
            });

            function onMouseMove(e) {
                if (!isDragging) return;
                const dx = e.clientX - startX;
                const dy = e.clientY - startY;
                windowDiv.style.left = `${startLeft + dx}px`;
                windowDiv.style.top = `${startTop + dy}px`;
            }

            function onMouseUp() {
                isDragging = false;
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
            }
        }

        // 监听键盘事件
        document.addEventListener('keydown', function (event) {
            if (event.altKey && (event.key === 'q' || event.key === 'Q')) {
                console.log("已监测到热键");
                if (isWindowCreated) {
                    destroyFloatingWindow();
                } else {
                    createFloatingWindow();
                }
            }
        });
    </script>@*  数据图形化区域 *@
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const modalHeader = document.querySelectorAll('.modal-header');
            modalHeader.forEach(header => {
                let isDragging = false;
                let offset = [0, 0];
                const modal = header.closest('.modal-content');

                header.addEventListener('mousedown', (e) => {
                    isDragging = true;
                    offset = [
                        modal.offsetLeft - e.clientX,
                        modal.offsetTop - e.clientY
                    ];
                });

                document.addEventListener('mouseup', () => {
                    isDragging = false;
                });

                document.addEventListener('mousemove', (e) => {
                    if (isDragging) {
                        modal.style.left = (e.clientX + offset[0]) + 'px';
                        modal.style.top = (e.clientY + offset[1]) + 'px';
                    }
                });
            });

            // Reset the form when modal is hidden
            const modals = ['#serviceCenterModalOP', '#dailyQualityModalOP', '#editModal'];
            modals.forEach(selector => {
                $(selector).on('hidden.bs.modal', function () {
                    $(this).find('form')[0].reset();
                });
            });
        });
    </script>@* 表单(即日质量问题编辑提交、一页纸报告生成)拖拽和重置功能 *@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Clear date input by default
            document.getElementById('searchByDate').value = '';

            // Add event listeners
            document.getElementById('searchByCarNumber').addEventListener('input', filterTable);
            document.getElementById('searchByMaterialNumber').addEventListener('input', filterTable);
            document.getElementById('searchByPQSNumber').addEventListener('input', filterTable);
            document.getElementById('searchByDate').addEventListener('input', filterTable);
            //document.getElementById('resetButton').addEventListener('click', resetFilters);
        });

        function convertToYymmdd(dateStr) {
            // 处理不同的日期格式
            let parts = dateStr.match(/(\d{4})[\/\-](\d{1,2})[\/\-](\d{1,2})/);
            if (parts) {
                let year = parts[1];
                let month = String(parts[2]).padStart(2, '0');
                let day = String(parts[3]).padStart(2, '0');
                return `${year.slice(2)}${month}${day}`;
            }

            // 如果输入的是日期对象
            if (dateStr instanceof Date) {
                let year = dateStr.getFullYear().toString();
                let month = String(dateStr.getMonth() + 1).padStart(2, '0');
                let day = String(dateStr.getDate()).padStart(2, '0');
                return `${year.slice(2)}${month}${day}`;
            }

            // 无法解析日期
            return '';
        }
        function parseDate(dateStr) {
            // 解析 yyyyMMdd 或 yyMMdd 格式的日期字符串
            let parts = dateStr.match(/(\d{2})(\d{2})(\d{2})/);
            if (parts) {
                let year = '20' + parts[1]; // 假设年份是 20xx
                let month = parts[2];
                let day = parts[3];
                return new Date(`${year}-${month}-${day}`);
            }
            return null;
        }


        function formatToTimestamp(dateStr) {
            let date = parseDate(dateStr);
            return date ? date.getTime() + 24 * 60 * 60 * 1000 - 999 : null;
        }

        function convertToTimestamp(dateStr) {
            // 用于处理日期的格式
            let date = parseDate(dateStr);
            return date ? date.getTime() : null;
        }


        function filterTable() {
            // console.log(`Start filtering...`);
            let carNumber = document.getElementById('searchByCarNumber').value.toLowerCase().trim();
            let materialNumber = document.getElementById('searchByMaterialNumber').value.toLowerCase().trim();
            let pqsNumber = document.getElementById('searchByPQSNumber').value.toLowerCase().trim();
            let dateRange = document.getElementById('searchByDate').value.toLowerCase();

            // Convert date range to start and end dates
            let [startDateStr, endDateStr] = dateRange.split('-');

            // 转换为时间戳
            let startTimestamp = startDateStr ? convertToTimestamp(startDateStr) : null;
            let endTimestamp = endDateStr ? convertToTimestamp(endDateStr) + 24 * 60 * 60 * 1000 - 1 : startTimestamp + 24 * 60 * 60 * 1000 - 1;


            let table = document.getElementById('queryTable');
            let rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
            ///-新增加的处理 空格 逻辑
            function matchesSearchTerm(cellText, searchTerms) {
                return searchTerms.some(term => cellText.includes(term));
            }
            let carNumberTerms = carNumber.split(/\s+/).map(term => term.trim()).filter(term => term.length > 0);
            let materialNumberTerms = materialNumber.split(/\s+/).map(term => term.trim()).filter(term => term.length > 0);
            let pqsNumberTerms = pqsNumber.split(/\s+/).map(term => term.trim()).filter(term => term.length > 0);

            for (let i = 0; i < rows.length; i++) {
                let cells = rows[i].getElementsByTagName('td');
                let showRow = true;

                // Check car number and chassis number
                if (carNumberTerms.length > 0) {
                    let carMatch = cells.length > 17 && matchesSearchTerm(cells[17].textContent.toLowerCase(), carNumberTerms);
                    let chassisMatch = cells.length > 18 && matchesSearchTerm(cells[18].textContent.toLowerCase(), carNumberTerms);
                    if (!carMatch && !chassisMatch) {
                        showRow = false;
                    }
                }

                // Check material number
                if (materialNumberTerms.length > 0 && cells.length > 2) {
                    let materialMatch = matchesSearchTerm(cells[2].textContent.toLowerCase(), materialNumberTerms);
                    if (!materialMatch) {
                        showRow = false;
                    }
                }

                // Check PQS number
                if (pqsNumberTerms.length > 0 && cells.length > 16) {
                    let pqsMatch = matchesSearchTerm(cells[16].textContent.toLowerCase(), pqsNumberTerms);
                    if (!pqsMatch) {
                        showRow = false;
                    }
                }


                if (dateRange) {
                    let rowDateStr = cells.length > 0 ? convertToYymmdd(cells[0].textContent) : '';
                    let rowTimestamp = formatToTimestamp(rowDateStr);
                    if (rowTimestamp !== null) {
                        // console.log('Row Timestamp:', rowTimestamp + '---' + rowDateStr);
                        // console.log('Start Timestamp:', startTimestamp + '---' + startDateStr);
                        // console.log('End Timestamp:', endTimestamp + '---' + endDateStr);

                        // 过滤逻辑
                        if (startTimestamp && rowTimestamp < startTimestamp) {
                            showRow = false;
                        }
                        if (endTimestamp && rowTimestamp > endTimestamp) {
                            showRow = false;
                        }
                    } else {
                        showRow = false;
                    }
                }

                rows[i].style.display = showRow ? '' : 'none';
            }
            //  console.log(`Filtering done.`);
        }

        function resetFilters() {
            document.getElementById('searchByCarNumber').value = '';
            document.getElementById('searchByMaterialNumber').value = '';
            document.getElementById('searchByPQSNumber').value = '';
            document.getElementById('searchByDate').value = '';
            filterTable(); // Clear filters and show all data
        }
    </script>   @* 下方左侧查询区域 *@
    <script>
        function exportTableToExcelQuery() {
            console.log('开始下载 Excel 文件');

            // 获取原始表格
            let table = document.getElementById('queryTable');

            // 创建一个新的表格用于存储可见的内容
            let tempTable = document.createElement('table');
            tempTable.className = table.className; // 复制表格的类名以保持样式一致

            // 复制表头
            let thead = table.querySelector('thead');
            if (thead) {
                let newThead = thead.cloneNode(true);
                tempTable.appendChild(newThead);
            }

            // 复制可见的行
            let tbody = table.querySelector('tbody');
            if (tbody) {
                let newTbody = document.createElement('tbody');
                let rows = tbody.querySelectorAll('tr');
                rows.forEach(row => {
                    if (row.style.display !== 'none') {
                        newTbody.appendChild(row.cloneNode(true));
                    }
                });
                tempTable.appendChild(newTbody);
            }

            // 创建工作簿并添加工作表
            let wb = XLSX.utils.book_new();
            let ws = XLSX.utils.table_to_sheet(tempTable, { header: 1 }); // 确保表头被包含
            XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');

            // 写入 Excel 文件
            XLSX.writeFile(wb, '即日质量问题查询.xlsx');
        }
        function exportTableToExcelAnalyse() {
            console.log("start to download excel for QE");
            let wb = XLSX.utils.book_new(); // 确保这里是 XLSX
            let ws = XLSX.utils.table_to_sheet(document.getElementById("example"));
            XLSX.utils.book_append_sheet(wb, ws, "Sheet1"); // 确保这里是 XLSX
            XLSX.writeFile(wb, "即日质量问题填报清单.xlsx"); // 确保这里是 XLSX
        }


    </script>  @* 导出模块仅限表格 *@
    <script>
        var optionsModalOP;
        function showOnePageModal() {
            optionsModalOP = new bootstrap.Modal(document.getElementById('optionsModalOP'));
            optionsModalOP.show();
        }

        function openServiceCenterModalOP() {
            let serviceCenterModalOP = new bootstrap.Modal(document.getElementById('serviceCenterModalOP'));
            serviceCenterModalOP.show();
            optionsModalOP.hide();
        }

        function showDailyQualityModalOP() {
            let dailyQualityModalOP = new bootstrap.Modal(document.getElementById('dailyQualityModalOP'));
            dailyQualityModalOP.show();
            optionsModalOP.hide();
        }


        function generatePPTOnePage(titleText, modal, problemDescriptionContents, failureSituationContents) {
            titleText = `市场重点问题 (${dataStoreOnePage.problemDescription[1]} 问题)`;
            console.log("start to create PPT " + titleText + dataStoreOnePage.textTitleOP);
            alert("开始生成一页纸报告");
            let pageMode = dataStoreOnePage.pageMode;
            // 创建PPTX文档
            let pres = new PptxGenJS();
            let slide = pres.addSlide();

            // 幻灯片的默认尺寸（宽度和高度以英寸为单位）
            let slideWidth = 10;
            let slideHeight = 5.625;

            // 1. 添加标题框
            let titleHeight = 0.6;
            let titleOpts = {
                x: 0,
                y: 0.1,
                w: slideWidth,
                h: titleHeight,
                fontSize: 24,
                color: "000000",
                align: "center",
                fill: { color: "4682B4" }
            };

            slide.addText(titleText, titleOpts);

            // 2. 计算文本框的宽度和高度
            let sectionWidth = slideWidth / 3;
            let problemDescHeight = titleHeight / 2;
            let failureHeight = titleHeight / 2;
            let remainingHeight = slideHeight - titleHeight;
            let yPos = titleHeight + 0.1;

            // 3. 固定字段标签
            let fixedLabels = [
                "问题来源：",
                "问题定义：",
                "问题等级：",
                "开启日期：",
                "供应商：",
                "涉及车型：",
                "内部车型：",
                "底盘号：",
                "生产/购车时间：",
                "生产/销售数量：",
                "PQS 编号："
            ];
            let failureLabels = [
                "案例数：",
                "失效率（客户）：",
                "失效率（车型）：",
                "失效率（发动机）：",
                "失效区域：",
                "失效里程：",
                "失效工况：",
                "是否按照要求保养：",
                "是否要按照要求返修：",
                "是否为断点失效产品：",
                "是否超边界：",
                "严重度：",
                "可能性："
            ];

            // 根据 titleText 设置问题描述和失效情况内容
            let problemDescriptionText, failureSituationText;

            switch (modal) {
                case pageMode.DAILY_QUALITY:
                    problemDescriptionText = fixedLabels.map((label, i) => `${label}${problemDescriptionContents[i] || "default"}`).join("\n");
                    failureSituationText = failureLabels.map((label, i) => `${label}${failureSituationContents[i] || "default"}`).join("\n");
                    break;
                case pageMode.TOP_ISSUES:
                    // 可以根据需要定义 TOP问题的内容
                    problemDescriptionText = fixedLabels.map((label, i) => `${label}${problemDescriptionContents[i] || "default"}`).join("\n");
                    failureSituationText = failureLabels.map((label, i) => `${label}${failureSituationContents[i] || "default"}`).join("\n");
                    break;
                case pageMode.TWENTY_FOUR_HOURS:
                    // 可以根据需要定义 24小时问题的内容
                    problemDescriptionText = fixedLabels.map((label, i) => `${label}${problemDescriptionContents[i] || "default"}`).join("\n");
                    failureSituationText = failureLabels.map((label, i) => `${label}${failureSituationContents[i] || "default"}`).join("\n");
                    break;
                case pageMode.SERVICE_CENTER:
                    // 可以根据需要定义 服务中心问题的内容
                    problemDescriptionText = fixedLabels.map((label, i) => `${label}${problemDescriptionContents[i] || "default"}`).join("\n");
                    failureSituationText = failureLabels.map((label, i) => `${label}${failureSituationContents[i] || "default"}`).join("\n");
                    break;
                case pageMode.OTHER_ISSUES:
                    // 可以根据需要定义 其他问题的内容
                    problemDescriptionText = fixedLabels.map((label, i) => `${label}${problemDescriptionContents[i] || "default"}`).join("\n");
                    failureSituationText = failureLabels.map((label, i) => `${label}${failureSituationContents[i] || "default"}`).join("\n");
                    break;
                default:
                    // 默认处理
                    problemDescriptionText = fixedLabels.map((label, i) => `${label}${problemDescriptionContents[i] || "default"}`).join("\n");
                    failureSituationText = failureLabels.map((label, i) => `${label}${failureSituationContents[i] || "default"}`).join("\n");
                    break;
            }

            // 添加文本框
            slide.addText("问题描述", {
                x: 0,
                y: yPos,
                w: sectionWidth,
                h: problemDescHeight,
                fontSize: 18,
                color: "000000",
                align: "center",
                fill: { color: "#ADD8E6" }
            });
            slide.addText("失效情况", {
                x: sectionWidth,
                y: yPos,
                w: slideWidth / 6,
                h: failureHeight,
                fontSize: 18,
                color: "000000",
                align: "center",
                fill: { color: "#ADD8E6" }
            });
            slide.addText("根本原因", {
                x: sectionWidth + slideWidth / 6,
                y: yPos,
                w: (1.5 * slideWidth) / 6,
                h: failureHeight,
                fontSize: 18,
                color: "000000",
                align: "center",
                fill: { color: "#ADD8E6" }
            });
            slide.addText("进展及计划", {
                x: sectionWidth + slideWidth / 6 + (1.5 * slideWidth) / 6,
                y: yPos,
                w: (1.5 * slideWidth) / 6,
                h: failureHeight,
                fontSize: 18,
                color: "000000",
                align: "center",
                fill: { color: "#ADD8E6" }
            });
            slide.addText("售后方案：\n根本原因：\n原因分析：\n", {
                x: sectionWidth + slideWidth / 6,
                y: yPos + problemDescHeight,
                w: (1.5 * slideWidth) / 6,
                h: remainingHeight - problemDescHeight,
                fontSize: 9,
                color: "000000",
                vAlign: "top",
            });
            slide.addText("牵头部门：\n遏制措施：\n长期措施：\n下一步计划：", {
                x: sectionWidth + slideWidth / 6 + (1.5 * slideWidth) / 6,
                y: yPos + problemDescHeight,
                w: (1.5 * slideWidth) / 6,
                h: remainingHeight - problemDescHeight,
                fontSize: 9,
                color: "000000",
                vAlign: "top",
            });
            slide.addText(problemDescriptionText, {
                x: 0,
                y: yPos + problemDescHeight,
                w: sectionWidth,
                h: remainingHeight - problemDescHeight,
                fontSize: 9,
                color: "000000",
                vAlign: "top",
                align: "left",
                bulletStyle: {
                    type: 'disc',
                    size: 10
                }
            });

            slide.addText(failureSituationText, {
                x: sectionWidth,
                y: yPos + failureHeight,
                w: slideWidth / 6,
                h: remainingHeight - failureHeight,
                fontSize: 9,
                color: "000000",
                vAlign: "top",
                align: "left",
                bulletStyle: {
                    type: 'disc',
                    size: 10
                }
            });

            // 保存演示文稿
            console.log("开始下载 PPTX 文件...");
            alert("一页纸文件已生成");
            pres.writeFile({
                fileName: `(${dataStoreOnePage.problemDescription[1]} ${dataStoreOnePage.problemDescription[7]})` // 输出为带 VID 的文件
            }).then(() => {
                console.log("PPTX 文件已下载");
            }).catch(err => {
                console.error("生成 PPTX 文件时出错：", err);
                alert("生成报告出错");
            });

        }

    </script>@* 一页纸报告样式逻辑 *@
    <script>

        function submitFormAndGeneratePPT(modalOP) {
            let formData = $('#dailyQualityFormOP').serialize(); // 获取表单数据

            // 从表单字段中获取 vehicleIdentification 的值
            let vehicleIdentification = $('#vehicleNumberOP').val();


            // 发起两个 AJAX 请求
            let qualityDataRequest = $.ajax({
                url: '/queryAPI/RemoteAccess/dailyqualitydata',
                type: 'GET',
                data: formData
            });

            let vehicleBasicInfoRequest = $.ajax({
                url: '/queryAPI/RemoteAccess/vehiclebasicinfodata',
                type: 'GET',
                data: { VehicleIdentification: vehicleIdentification } // 发送表单字段值作为查询参数
            });

            // 使用 $.when() 等待两个请求都完成
            $.when(qualityDataRequest, vehicleBasicInfoRequest).done(function (qualityDataResponse, vehicleBasicInfoResponse) {
                // 处理 dailyqualitydata 请求的成功回调
                let qualityData = qualityDataResponse[0];
                dataStoreOnePage.contentOPCache = qualityData.data
                //  console.log(qualityData);

                // 处理 vehicleIdentification
                let vehicleNumbersArray = [];
                let matchingRows = [];
                let data;

                if (vehicleIdentification) {
                    // 将车号或 VIN 分割成数组，去掉空白
                    vehicleNumbersArray = vehicleIdentification.split(' ').filter(id => id.trim() !== '');


                    // 遍历 qualityData 检查 VAN 或 VIN
                    vehicleNumbersArray.forEach(id => {
                        // 首先检查 VAN
                        qualityData.data.forEach((item, index) => {
                            if (matchingRows.includes(index)) return; // 避免重复处理

                            if (item.van === id) {
                                matchingRows.push(index);
                            }
                        });

                        // 然后检查 VIN
                        qualityData.data.forEach((item, index) => {
                            if (matchingRows.includes(index)) return; // 避免重复处理

                            if (item.vin && item.vin.slice(-8) === id) {
                                matchingRows.push(index);
                            }
                        });
                    });

                    data = qualityData.data[matchingRows[0]];
                    console.log(vehicleNumbersArray);
                    console.log(matchingRows);
                }
                else {

                    data = qualityData.data[0];

                }
                // 假设 qualityData 是一个包含数据的数组，取第一个对象作为示例

                // 更新 problemDescription 数组
                dataStoreOnePage.problemDescription[0] = modalOP; // 即日质量问题
                //问题定义
                let faultmodeDescriptionOP = $('#faultModeOP').val() || data.faultCodeDescription;
                dataStoreOnePage.problemDescription[1] = `${data.province}${data.filteredVehicleModel}车${faultmodeDescriptionOP}`;
                //根据表单提交的情况
                let requestDate = new Date();
                dataStoreOnePage.problemDescription[3] = requestDate.toISOString().split('T')[0].replace(/-/g, '/'); // 格式为YYYY/MM/DD
                dataStoreOnePage.problemDescription[4] = data.responsibilitySourceSupplierName; // 供应商名称
                if (!vehicleIdentification)
                    dataStoreOnePage.problemDescription[5] = `${data.vehicleType}（${data.fdp}）`;//车型
                else {
                    let fdpList = matchingRows.map(rowIndex => qualityData.data[rowIndex].fdp).filter(fdp => fdp).join(', ');
                    dataStoreOnePage.problemDescription[5] = `${data.vehicleType}（${fdpList}）`;//车型
                }
                dataStoreOnePage.problemDescription[6] = data.internalModelCode; // internalModelCode
                if (!vehicleIdentification) {
                    dataStoreOnePage.problemDescription[7] = `${data.van}(${data.vin.slice(-8)})`; // 默认处理
                } else {
                    // 获取所有匹配行的 van 和 vin（后 8 位），格式化为 "van(vin)"，用逗号分隔
                    let vanVinList = matchingRows.map(rowIndex => {
                        let item = qualityData.data[rowIndex];
                        return `${item.van}(${item.vin ? item.vin.slice(-8) : ''})`;
                    }).filter(vanVin => vanVin.trim() !== '').join(', ');

                    // 更新 problemDescription[7]
                    dataStoreOnePage.problemDescription[7] = vanVinList;
                }

                let manufacturingDate = data.manufacturingMonth;
                let salesDate = data.salesDate;
                // let salesDate = new Date(parseInt(data.salesDate, 10) * 86400000 + new Date(1899, 11, 30).getTime()); // 转换 salesDate 为日期
                // manufacturingDate = `${manufacturingDate.substring(0, 4)}/${manufacturingDate.substring(4, 6)}/01`; // 格式为 yyyy/mm/dd
                // salesDate = `${salesDate.getFullYear()}/${('0' + (salesDate.getMonth() + 1)).slice(-2)}/${('0' + salesDate.getDate()).slice(-2)}`; // 格式为 yyyy/mm/dd
                dataStoreOnePage.problemDescription[8] = `${manufacturingDate}, ${salesDate}`; // 制造月和销售日期

                // 更新 failureSituation 数组
                dataStoreOnePage.failureSituation[0] = qualityData.data.length; // 返回数组的长度
                dataStoreOnePage.failureSituation[1] = (qualityData.data.length / 100 * 100).toFixed(1) + '%';
                dataStoreOnePage.failureSituation[2] = (qualityData.data.length / 1000 * 100).toFixed(1) + '%';
                dataStoreOnePage.failureSituation[3] = (qualityData.data.length / 1200 * 100).toFixed(1) + '%';
                dataStoreOnePage.failureSituation[4] = data.outboundServiceLocation; // outboundServiceLocation
                dataStoreOnePage.failureSituation[5] = `${data.drivingMileageKM} KM`;//失效里程
                let failureConditionOP = $('#failureConditionOP').val() || "NA";
                dataStoreOnePage.failureSituation[6] = failureConditionOP;  //如果表单传入了失效工况则有失效工况，如果未传入则显示NA
                // 处理 vehiclebasicinfodata 请求的成功回调

                dataStoreOnePage.failureSituation[9] = $('#breakpointTimeOP').val() ? "是" : "否";//判断是否断点失效产品

                let vehicleInfo = qualityData.filteredInfo;
                dataStoreOnePage.problemDescription[9] = `${vehicleInfo.totalFdpCount} / ${vehicleInfo.filteredDateCount}`; // 生产总数 / 销售总数
                console.log(dataStoreOnePage.contentOPCache);
                console.log(dataStoreOnePage.problemDescription); // 查看更新后的 problemDescription 数组
                console.log(dataStoreOnePage.failureSituation); // 查看更新后的 failureSituation 数组
                console.log('Vehicle Basic Info Data:', vehicleInfo);
                // 可以在这里处理 vehicleInfo 数据，比如更新页面或其他操作
                //生成一页纸报告

                generatePPTOnePage(dataStoreOnePage.problemDescription[1], modalOP, dataStoreOnePage.problemDescription, dataStoreOnePage.failureSituation)



            }).fail(function (jqXHR, textStatus, errorThrown) {
                let errorMessage = '请求失败，请稍后再试。';
                if (jqXHR.status === 404) {
                    errorMessage = '未找到查询结果，请重新检查查询条件。';
                } else if (jqXHR.status === 400) {
                    errorMessage = '请求参数错误，请重新输入。';
                } else if (jqXHR.status === 500) {
                    errorMessage = '服务器错误，请稍后再试。';
                }
                alert(errorMessage);

                console.error('请求失败:', textStatus, errorThrown);
            });

        }


    </script> @* 一页纸报告赋值逻辑 *@
    <script>
        function submitToSIL() {
            let formData = $('#dailyQualityFormOP').serialize(); // 获取表单数据
            console.log("使用SIL 方法");

            // 发起 AJAX 请求

            $.ajax({
                url: '/queryAPI/RemoteAccess/dailyqualitydataforsil',
                type: 'POST', // 或 'POST'，根据需要
                data: formData,
                success: function (response) {
                    // 处理成功回调
                    console.log('成功纳入SIL:', response);
                    alert("成功纳入SIL");
                    // 在这里可以执行其他操作，例如显示成功消息等
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    let errorMessage = '请求失败，请稍后再试。';
                    if (jqXHR.status === 404) {
                        errorMessage = '未找到查询结果，请重新检查查询条件。';
                    } else if (jqXHR.status === 400) {
                        errorMessage = '请求参数错误，请重新输入。';
                    } else if (jqXHR.status === 500) {
                        errorMessage = '服务器错误，请稍后再试。';
                    }
                    alert(errorMessage);
                    console.error('请求失败:', textStatus, errorThrown);
                }
            });
        }

    </script> @* SIL逻辑 *@
    <script>
        $(document).ready(function () { // 确保 DOM 加载完成后执行代码,添加动态禁用按钮

            let role = '@ViewBag.Role';
            console.log("group is:" + role);
            if (role === "D") {
                $('#editQEChange').prop('disabled', true).css('background-color', '#d3d3d3').css('cursor', 'not-allowed');
            }

            function convertKeysToLowerCase(data) {
                const result = {};
                for (const key in data) {
                    if (data.hasOwnProperty(key)) {
                        result[key.toLowerCase()] = data[key];
                    }
                }
                return result;
            }
            //事件绑定
            $(document).on('click', '.edit-btn', function () {
                console.log("开始编辑");
                let id = $(this).data('id');
                $.get('/RemoteEdit/GetDetails', { id: id }, function (data) {
                    data = convertKeysToLowerCase(data);
                    if (data.success !== false) {
                        $('#editId').val(data.id || "0");
                        $('#editOldMaterialCode').val(data.oldmaterialcode || "0");
                        $('#editOldMaterialDescription').val(data.oldmaterialdescription || "0");
                        $('#editSupplierShortCode').val(data.suppliershortcode || "0");
                        $('#editResponsibilitySourceSupplierName').val(data.responsibilitysourcesuppliername || "NA");
                        $('#editFilteredVehicleModel').val(data.filteredvehiclemodel || "NA");
                        $('#editCaseCount').val(data.casecount || "NA");
                        $('#editMIS3').val(data.mis3 || "0");
                        $('#editMIS6').val(data.mis6 || "0");
                        $('#editMIS12').val(data.mis12 || "0");
                        $('#editMIS24').val(data.mis24 || "0");
                        $('#editMIS48').val(data.mis48 || "0");
                        $('#editSMT').val(data.smt || "NA");
                        $('#editLocationCode').val(data.locationcode || "NA");
                        $('#editFaultCode').val(data.faultcode || "NA");
                        $('#editQE').val(data.qe || "NA");
                        $('#editBreakdownCount').val(data.breakdowncount || "NA");
                        $('#editIsBreakdownInvalid').val(data.isbreakdowninvalid || "NA");
                        $('#editIssueAttributes').val(data.issueattributes || "NA");
                        $('#editRowVersion').val(data.rowversion || "NA"); // 填充 RowVersion
                        // $('#editIdentifiedFaultCode').val(data.identifiedfaultcode || "NA");
                        $('#editModal').modal('show');
                    } else {
                        alert(data.message);
                    }
                }).fail(function () {
                    alert('请求失败');
                });
            });

            $('#editForm').on('submit', function (e) {
                e.preventDefault();
                let formData = $(this).serialize();
                console.log(formData);
                $.post('/RemoteEdit/Edit', formData, function (response) {
                    if (response.success) {
                        console.log("编辑成功");
                        // $('#editModal').modal('hide');
                        // location.reload();
                    } else {
                        alert(response.message);
                    }
                }).fail(function () {
                    alert('提交失败');
                });
            });

            $("#editForm").on("click", "#editProblemChange", function (f) {
                f.preventDefault();
                console.log("这是一个问题变更方法");


                $('#editServiceFaultIdentificationAccurate').val('');
                $('#editIdentifiedFaultMode').val('');
                $('#editIncludedInSIL').val('');
                $('#editPQSNumber').val('');
                $('#editBreakpointTime').val('');
                $('#editStartTime').val('');
                $('#editRemarks').val('问题变更');
                $('#editProjectIdentifier').val('');
                let formData = $("#editForm").serialize();
                $.post("/RemoteEdit/Edit", formData, function (response) {

                    if (response.success) {

                        $("#ditModal").modal("hide");
                        location.reload();
                    }
                    else {

                    }
                }).fail(function () {

                    alert("提交变更失败");
                });
            });

            $("#editForm").on("click", "#editQEChange", function (f) {
                f.preventDefault();
                console.log("这是一个变更QE的方法");
                $('#editModal').modal('hide');


                $.get('/RemoteEdit/GetUserNamesForRoleD', function (data) {
                    if (data.length > 0) {
                        // 清空下拉菜单
                        $("#editQEChoose").empty();
                        // 默认选择一个空选项
                        $("#editQEChoose").append('<option value="">选择QE</option>');

                        // 动态添加所有用户 Name 到下拉菜单中
                        data.forEach(function (name) {
                            $("#editQEChoose").append('<option value="' + name + '">' + name + '</option>');
                        });
                    } else {
                        alert("没有符合条件的QE用户！");
                    }
                }).fail(function () {
                    alert("获取用户列表失败！");
                });
                $('#editQEChangeModal').modal('show');
            });//改变QE提交表单


            $('#editQEChangeModal').on("click", "#editQESubmit", function (h) {
                h.preventDefault();
                console.log("这是一个更改QE的表单");

                let selectedQE = $('#editQEChoose').val();  // 获取选中的值
                $('#editQE').val(selectedQE);  // 设置 #editQE 的值为选中的值
                $('#editServiceFaultIdentificationAccurate').val('');
                $('#editIdentifiedFaultMode').val('');
                $('#editIncludedInSIL').val('');
                $('#editPQSNumber').val('');
                $('#editBreakpointTime').val('');
                $('#editStartTime').val('');
                $('#editRemarks').val('');
                $('#editProjectIdentifier').val('');


                let formData = $("#editForm").serialize();
                $.post("/RemoteEdit/Edit", formData, function (response) {

                    if (response.success) {

                        $("#editQEChangeModal").modal("hide");
                        location.reload();
                    }
                    else {

                    }
                }).fail(function () {

                    alert("提交变更失败");
                });


            })
        });

    </script>@*  即日质量问题编辑区域 *@

}